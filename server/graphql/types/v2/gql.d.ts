/* eslint-disable */
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

declare module "@apollo/client" {

  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment AccountHoverCardFields on Account {\n    id\n    name\n    slug\n    type\n    description\n    imageUrl\n    isHost\n    isArchived\n    ... on Individual {\n      isGuest\n    }\n    ... on AccountWithHost {\n      host {\n        id\n        slug\n      }\n      approvedAt\n    }\n\n    ... on AccountWithParent {\n      parent {\n        id\n        slug\n      }\n    }\n  }\n"): typeof import('./graphql').AccountHoverCardFieldsFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UserContextualMemberships(\n    $userSlug: String!\n    $accountSlug: String\n    $hostSlug: String\n    $getHostAdmin: Boolean!\n    $getAccountAdmin: Boolean!\n  ) {\n    account(slug: $userSlug) {\n      id\n      accountAdminMemberships: memberOf(role: [ADMIN], account: { slug: $accountSlug }, isApproved: true)\n        @include(if: $getAccountAdmin) {\n        nodes {\n          id\n          role\n          since\n          account {\n            id\n            slug\n          }\n        }\n      }\n      hostAdminMemberships: memberOf(role: [ADMIN], account: { slug: $hostSlug }, isApproved: true)\n        @include(if: $getHostAdmin) {\n        nodes {\n          id\n          role\n          since\n          account {\n            id\n            slug\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').UserContextualMembershipsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SearchTags($term: String) {\n    tagStats(tagSearchTerm: $term) {\n      nodes {\n        id\n        tag\n      }\n    }\n  }\n"): typeof import('./graphql').SearchTagsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ConfirmContributionFields on Order {\n    id\n    hostFeePercent\n    pendingContributionData {\n      expectedAt\n      paymentMethod\n      ponumber\n      memo\n      fromAccountInfo {\n        name\n        email\n      }\n    }\n    memo\n    fromAccount {\n      id\n      slug\n      name\n      type\n      imageUrl\n      hasImage\n      isIncognito\n      ... on Individual {\n        isGuest\n      }\n    }\n    toAccount {\n      id\n      slug\n      name\n      type\n      imageUrl\n      hasImage\n      ... on AccountWithHost {\n        bankTransfersHostFeePercent: hostFeePercent(paymentMethodType: MANUAL)\n        host {\n          id\n          settings\n        }\n      }\n      ... on Organization {\n        host {\n          id\n          settings\n        }\n      }\n    }\n    createdByAccount {\n      id\n      slug\n      name\n      imageUrl\n    }\n    totalAmount {\n      valueInCents\n      currency\n    }\n    amount {\n      currency\n      valueInCents\n    }\n    taxAmount {\n      currency\n      valueInCents\n    }\n    tax {\n      id\n      type\n      rate\n    }\n    platformTipAmount {\n      currency\n      valueInCents\n    }\n    platformTipEligible\n  }\n"): typeof import('./graphql').ConfirmContributionFieldsFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ConfirmContribution($order: OrderUpdateInput!, $action: ProcessOrderAction!) {\n    processPendingOrder(order: $order, action: $action) {\n      id\n      legacyId\n      status\n      permissions {\n        id\n        canMarkAsPaid\n        canMarkAsExpired\n      }\n      ...ConfirmContributionFields\n    }\n  }\n  \n"): typeof import('./graphql').ConfirmContributionDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CancelRecurringContribution($order: OrderReferenceInput!, $reason: String!, $reasonCode: String!) {\n    cancelOrder(order: $order, reason: $reason, reasonCode: $reasonCode) {\n      id\n      status\n    }\n  }\n"): typeof import('./graphql').CancelRecurringContributionDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query EditPaymentMethodModal($order: OrderReferenceInput!) {\n        order(order: $order) {\n          id\n          totalAmount {\n            currency\n            valueInCents\n          }\n          fromAccount {\n            id\n            slug\n          }\n          toAccount {\n            id\n            slug\n            ... on AccountWithHost {\n              host {\n                id\n                slug\n                paypalClientId\n                supportedPaymentMethods\n              }\n            }\n            ... on Organization {\n              host {\n                id\n                slug\n                paypalClientId\n                supportedPaymentMethods\n              }\n            }\n          }\n        }\n      }\n    "): typeof import('./graphql').EditPaymentMethodModalDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      mutation AddStripePaymentMethodFromSetupIntent(\n        $setupIntent: SetupIntentInput!\n        $account: AccountReferenceInput!\n      ) {\n        addStripePaymentMethodFromSetupIntent(setupIntent: $setupIntent, account: $account) {\n          id\n          type\n          name\n        }\n      }\n    "): typeof import('./graphql').AddStripePaymentMethodFromSetupIntentDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query TagStats($host: AccountReferenceInput) {\n    tagStats(host: $host, limit: 5) {\n      nodes {\n        id\n        tag\n      }\n    }\n  }\n"): typeof import('./graphql').TagStatsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      mutation FollowAccount($accountSlug: String!) {\n        followAccount(account: { slug: $accountSlug }) {\n          member {\n            id\n          }\n        }\n      }\n    "): typeof import('./graphql').FollowAccountDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      mutation UnfollowAccount($accountSlug: String!) {\n        unfollowAccount(account: { slug: $accountSlug }) {\n          member {\n            id\n          }\n        }\n      }\n    "): typeof import('./graphql').UnfollowAccountDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PaypalPlan(\n    $account: AccountReferenceInput!\n    $tier: TierReferenceInput\n    $amount: AmountInput!\n    $frequency: ContributionFrequency!\n  ) {\n    paypalPlan(account: $account, tier: $tier, amount: $amount, frequency: $frequency) {\n      id\n    }\n  }\n"): typeof import('./graphql').PaypalPlanDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation EditAccountSettings($account: AccountReferenceInput!, $key: AccountSettingsKey!, $value: JSON!) {\n    editAccountSetting(account: $account, key: $key, value: $value) {\n      id\n      settings\n    }\n  }\n"): typeof import('./graphql').EditAccountSettingsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation EditUpdate($update: UpdateUpdateInput!) {\n    editUpdate(update: $update) {\n      id\n      updatedAt\n      title\n      html\n      isPrivate\n      isChangelog\n      makePublicOn\n      userCanPublishUpdate\n    }\n  }\n"): typeof import('./graphql').EditUpdateDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteUpdate($id: String!) {\n    deleteUpdate(id: $id) {\n      id\n    }\n  }\n"): typeof import('./graphql').DeleteUpdateDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation SendSurveyResponse(\n    $surveyKey: String!\n    $responseId: String!\n    $score: Int!\n    $text: String\n    $okToContact: Boolean\n  ) {\n    sendSurveyResponse(\n      surveyKey: $surveyKey\n      responseId: $responseId\n      score: $score\n      text: $text\n      okToContact: $okToContact\n    )\n  }\n"): typeof import('./graphql').SendSurveyResponseDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindAFiscalHost(\n    $tags: [String]\n    $limit: Int\n    $offset: Int\n    $country: [CountryISO]\n    $currency: String\n    $searchTerm: String\n  ) {\n    hosts(\n      tag: $tags\n      limit: $limit\n      offset: $offset\n      tagSearchOperator: OR\n      country: $country\n      currency: $currency\n      searchTerm: $searchTerm\n    ) {\n      totalCount\n      limit\n      offset\n      nodes {\n        id\n        legacyId\n        createdAt\n        settings\n        type\n        name\n        slug\n        description\n        longDescription\n        currency\n        totalHostedCollectives\n        hostFeePercent\n        isTrustedHost\n        location {\n          id\n          country\n        }\n        tags\n      }\n    }\n  }\n"): typeof import('./graphql').FindAFiscalHostDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AdminPanel($slug: String!) {\n    account(slug: $slug) {\n      id\n      legacyId\n      slug\n      name\n      isHost\n      type\n      settings\n      isArchived\n      isIncognito\n      imageUrl(height: 256)\n      features {\n        id\n        ...NavbarFields\n        VIRTUAL_CARDS\n        USE_PAYMENT_METHODS\n        EMIT_GIFT_CARDS\n      }\n      policies {\n        id\n        REQUIRE_2FA_FOR_ADMINS\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          policies {\n            id\n            REQUIRE_2FA_FOR_ADMINS\n          }\n        }\n      }\n      ... on AccountWithHost {\n        hostFeePercent\n        host {\n          id\n          slug\n          name\n          settings\n          policies {\n            id\n            EXPENSE_AUTHOR_CANNOT_APPROVE {\n              enabled\n              amountInCents\n              appliesToHostedCollectives\n              appliesToSingleAdminCollectives\n            }\n            COLLECTIVE_MINIMUM_ADMINS {\n              numberOfAdmins\n              applies\n              freeze\n            }\n          }\n        }\n      }\n      ... on AccountWithHost {\n        isApproved\n      }\n    }\n  }\n  \n"): typeof import('./graphql').AdminPanelDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query HostDashboardVirtualCardRequests(\n    $hostSlug: String!\n    $collective: [AccountReferenceInput]\n    $selectedCollectiveSlug: String\n    $status: [VirtualCardRequestStatus]\n    $limit: Int!\n    $offset: Int!\n  ) {\n    host(slug: $hostSlug) {\n      id\n      legacyId\n    }\n    account(slug: $selectedCollectiveSlug) {\n      id\n      legacyId\n      slug\n    }\n    virtualCardRequests(\n      host: { slug: $hostSlug }\n      collective: $collective\n      status: $status\n      limit: $limit\n      offset: $offset\n    ) {\n      totalCount\n      limit\n      offset\n      nodes {\n        id\n        legacyId\n        purpose\n        notes\n        status\n        currency\n        spendingLimitAmount {\n          valueInCents\n          currency\n        }\n        spendingLimitInterval\n        createdAt\n        account {\n          id\n          name\n          slug\n          imageUrl\n          ...AccountHoverCardFields\n        }\n        host {\n          id\n          name\n          slug\n          imageUrl\n        }\n        assignee {\n          id\n          name\n          email\n          slug\n          imageUrl\n          ...AccountHoverCardFields\n        }\n      }\n    }\n  }\n  \n"): typeof import('./graphql').HostDashboardVirtualCardRequestsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AdminAccountingCategories($hostSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      slug\n      accountingCategories {\n        totalCount\n        nodes {\n          id\n          kind\n          code\n          hostOnly\n          instructions\n          name\n          friendlyName\n          expensesTypes\n          createdAt\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').AdminAccountingCategoriesDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation EditAccountingCategories($hostSlug: String!, $categories: [AccountingCategoryInput!]!) {\n    editAccountingCategories(account: { slug: $hostSlug }, categories: $categories) {\n      id\n      ... on Organization {\n        host {\n          id\n          slug\n          accountingCategories {\n            totalCount\n            nodes {\n              id\n              kind\n              code\n              name\n              hostOnly\n              instructions\n              friendlyName\n              expensesTypes\n              createdAt\n            }\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').EditAccountingCategoriesDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment AgreementMutationFields on Agreement {\n    id\n    ...AgreementViewFields\n    account {\n      id\n      ... on AccountWithHost {\n        # Refetch account agreements count to update the cache\n        hostAgreements {\n          totalCount\n        }\n      }\n    }\n  }\n  \n"): typeof import('./graphql').AgreementMutationFieldsFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AddAgreement(\n    $host: AccountReferenceInput!\n    $account: AccountReferenceInput!\n    $attachment: Upload\n    $title: NonEmptyString!\n    $notes: String\n    $expiresAt: DateTime\n  ) {\n    addAgreement(\n      host: $host\n      title: $title\n      account: $account\n      attachment: $attachment\n      expiresAt: $expiresAt\n      notes: $notes\n    ) {\n      id\n      ...AgreementMutationFields\n    }\n  }\n  \n"): typeof import('./graphql').AddAgreementDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation EditAgreement(\n    $agreement: AgreementReferenceInput!\n    $title: NonEmptyString!\n    $expiresAt: DateTime\n    $notes: String\n    $attachment: Upload\n  ) {\n    editAgreement(agreement: $agreement, title: $title, expiresAt: $expiresAt, notes: $notes, attachment: $attachment) {\n      id\n      ...AgreementMutationFields\n    }\n  }\n  \n"): typeof import('./graphql').EditAgreementDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteAgreement($id: String!) {\n    deleteAgreement(agreement: { id: $id }) {\n      id\n    }\n  }\n"): typeof import('./graphql').DeleteAgreementDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment AgreementViewFields on Agreement {\n    id\n    title\n    createdAt\n    expiresAt\n    notes\n    account {\n      id\n      type\n      legacyId\n      slug\n      imageUrl\n      name\n      ...AccountHoverCardFields\n    }\n    createdBy {\n      id\n      type\n      legacyId\n      slug\n      imageUrl\n      name\n      ...AccountHoverCardFields\n    }\n    attachment {\n      id\n      url\n      name\n      size\n      type\n    }\n  }\n  \n"): typeof import('./graphql').AgreementViewFieldsFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment NavbarFields on CollectiveFeatures {\n    id\n    ABOUT\n    CONNECTED_ACCOUNTS\n    RECEIVE_FINANCIAL_CONTRIBUTIONS\n    RECURRING_CONTRIBUTIONS\n    EVENTS\n    PROJECTS\n    USE_EXPENSES\n    RECEIVE_EXPENSES\n    COLLECTIVE_GOALS\n    TOP_FINANCIAL_CONTRIBUTORS\n    CONVERSATIONS\n    UPDATES\n    TEAM\n    CONTACT_FORM\n    RECEIVE_HOST_APPLICATIONS\n    HOST_DASHBOARD\n    TRANSACTIONS\n    REQUEST_VIRTUAL_CARDS\n  }\n"): typeof import('./graphql').NavbarFieldsFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UpdatesSection($slug: String!, $onlyPublishedUpdates: Boolean) {\n    account(slug: $slug) {\n      id\n      updates(limit: 3, onlyPublishedUpdates: $onlyPublishedUpdates) {\n        nodes {\n          id\n          slug\n          title\n          summary\n          createdAt\n          publishedAt\n          isPrivate\n          userCanSeeUpdate\n          fromAccount {\n            id\n            type\n            name\n            slug\n            imageUrl\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').UpdatesSectionDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ContributionFlowPaymentMethods($slug: String) {\n    account(slug: $slug) {\n      id\n      paymentMethods(\n        type: [CREDITCARD, US_BANK_ACCOUNT, SEPA_DEBIT, BACS_DEBIT, GIFTCARD, PREPAID, COLLECTIVE]\n        includeExpired: true\n      ) {\n        id\n        name\n        data\n        service\n        type\n        expiryDate\n        providerType\n        sourcePaymentMethod {\n          id\n          name\n          data\n          service\n          type\n          expiryDate\n          providerType\n          balance {\n            currency\n          }\n          limitedToHosts {\n            id\n            legacyId\n            slug\n          }\n        }\n        balance {\n          valueInCents\n          currency\n        }\n        account {\n          id\n          slug\n          type\n          name\n          imageUrl\n        }\n        limitedToHosts {\n          id\n          legacyId\n          slug\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').ContributionFlowPaymentMethodsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CommentFields on Comment {\n    id\n    createdAt\n    html\n    reactions\n    userReactions\n    type\n    account {\n      id\n      slug\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n        }\n      }\n    }\n    fromAccount {\n      id\n      type\n      name\n      slug\n      imageUrl\n      ...AccountHoverCardFields\n    }\n  }\n  \n"): typeof import('./graphql').CommentFieldsFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ConversationListFragment on ConversationCollection {\n    totalCount\n    offset\n    limit\n    nodes {\n      id\n      title\n      summary\n      slug\n      createdAt\n      tags\n      fromAccount {\n        id\n        name\n        type\n        slug\n        imageUrl\n      }\n      followers(limit: 5) {\n        totalCount\n        nodes {\n          id\n          slug\n          type\n          name\n          imageUrl(height: 64)\n        }\n      }\n      stats {\n        id\n        commentsCount\n      }\n    }\n  }\n"): typeof import('./graphql').ConversationListFragmentFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query IsUserFollowingConversation($id: String!) {\n    loggedInAccount {\n      id\n      slug\n      imageUrl\n      type\n      name\n      ... on Individual {\n        isFollowingConversation(id: $id)\n      }\n    }\n  }\n"): typeof import('./graphql').IsUserFollowingConversationDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ExpenseTags($searchTerm: String, $host: AccountReferenceInput, $account: AccountReferenceInput) {\n    tagStats: expenseTagStats(tagSearchTerm: $searchTerm, host: $host, account: $account) {\n      nodes {\n        id\n        tag\n      }\n    }\n  }\n"): typeof import('./graphql').ExpenseTagsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Account($slug: String!) {\n    account(slug: $slug) {\n      id\n      ...AccountHoverCardFields\n    }\n  }\n  \n"): typeof import('./graphql').AccountDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query HostedAccountFilterSearch($searchTerm: String, $hostSlug: String, $orderBy: OrderByInput) {\n    accounts(searchTerm: $searchTerm, host: { slug: $hostSlug }, orderBy: $orderBy) {\n      nodes {\n        id\n        ...AccountHoverCardFields\n      }\n    }\n  }\n  \n"): typeof import('./graphql').HostedAccountFilterSearchDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query VirtualCardFilter($id: String!) {\n    virtualCard(virtualCard: { id: $id }) {\n      id\n      name\n      last4\n    }\n  }\n"): typeof import('./graphql').VirtualCardFilterDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Dashboard($slug: String!) {\n    account(slug: $slug) {\n      id\n      legacyId\n      slug\n      name\n      isHost\n      type\n      settings\n      isArchived\n      isIncognito\n      imageUrl(height: 256)\n      pendingExpenses: expenses(status: PENDING, direction: RECEIVED, includeChildrenExpenses: true, limit: 0) {\n        totalCount\n      }\n      childrenAccounts {\n        totalCount\n        nodes {\n          id\n          slug\n          name\n          type\n        }\n      }\n      features {\n        id\n        ...NavbarFields\n        VIRTUAL_CARDS\n        USE_PAYMENT_METHODS\n        EMIT_GIFT_CARDS\n      }\n      policies {\n        id\n        REQUIRE_2FA_FOR_ADMINS\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          policies {\n            id\n            REQUIRE_2FA_FOR_ADMINS\n          }\n        }\n      }\n      ... on AccountWithHost {\n        hostFeePercent\n        host {\n          id\n          slug\n          name\n          settings\n          policies {\n            id\n            EXPENSE_AUTHOR_CANNOT_APPROVE {\n              enabled\n              amountInCents\n              appliesToHostedCollectives\n              appliesToSingleAdminCollectives\n            }\n            COLLECTIVE_MINIMUM_ADMINS {\n              numberOfAdmins\n              applies\n              freeze\n            }\n          }\n        }\n      }\n      ... on AccountWithHost {\n        isApproved\n      }\n    }\n  }\n  \n"): typeof import('./graphql').DashboardDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query DashboardContributorsMetadata($slug: String!) {\n    account(slug: $slug) {\n      id\n      legacyId\n      slug\n      name\n      type\n      settings\n      imageUrl\n      currency\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n        }\n      }\n      ALL: members(role: [BACKER, FOLLOWER]) {\n        totalCount\n      }\n      FOLLOWERS: members(role: [FOLLOWER]) {\n        totalCount\n      }\n      BACKERS: members(role: [BACKER]) {\n        totalCount\n      }\n    }\n  }\n"): typeof import('./graphql').DashboardContributorsMetadataDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query DashboardContributors(\n    $slug: String!\n    $offset: Int\n    $limit: Int\n    $role: [MemberRole!]\n    $orderBy: ChronologicalOrderInput\n    $email: EmailAddress\n  ) {\n    account(slug: $slug) {\n      id\n      members(role: $role, offset: $offset, limit: $limit, orderBy: $orderBy, email: $email) {\n        totalCount\n        nodes {\n          id\n          role\n          tier {\n            id\n            name\n          }\n          account {\n            id\n            slug\n            name\n          }\n          totalDonations {\n            currency\n            valueInCents\n          }\n          publicMessage\n          description\n          since\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').DashboardContributorsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query HostAgreements($hostSlug: String!, $limit: Int!, $offset: Int!, $account: [AccountReferenceInput]) {\n    host(slug: $hostSlug) {\n      id\n      legacyId\n      slug\n      hostedAccountAgreements(limit: $limit, offset: $offset, accounts: $account) {\n        totalCount\n        nodes {\n          id\n          ...AgreementViewFields\n        }\n      }\n    }\n  }\n  \n"): typeof import('./graphql').HostAgreementsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query HostReportsPage(\n    $hostSlug: String!\n    $account: [AccountReferenceInput!]\n    $dateFrom: DateTime\n    $dateTo: DateTime\n  ) {\n    host(slug: $hostSlug) {\n      id\n      legacyId\n      slug\n      name\n      currency\n      isHost\n      isActive\n      type\n      createdAt\n      hostFeePercent\n      isTrustedHost\n      settings\n      stats {\n        id\n        balance(dateTo: $dateTo) {\n          valueInCents\n          currency\n        }\n      }\n      contributionStats(account: $account, dateFrom: $dateFrom, dateTo: $dateTo) {\n        contributionsCount\n        oneTimeContributionsCount\n        recurringContributionsCount\n        dailyAverageIncomeAmount {\n          valueInCents\n        }\n      }\n      expenseStats(account: $account, dateFrom: $dateFrom, dateTo: $dateTo) {\n        expensesCount\n        dailyAverageAmount {\n          valueInCents\n        }\n        invoicesCount\n        reimbursementsCount\n        grantsCount\n      }\n      hostMetrics(account: $account, dateFrom: $dateFrom, dateTo: $dateTo) {\n        hostFees {\n          valueInCents\n          currency\n        }\n        hostFeeShare {\n          valueInCents\n          currency\n        }\n        platformTips {\n          valueInCents\n          currency\n        }\n        pendingPlatformTips {\n          valueInCents\n          currency\n        }\n        totalMoneyManaged {\n          valueInCents\n          currency\n        }\n      }\n      hostMetricsTimeSeries(account: $account, dateFrom: $dateFrom, dateTo: $dateTo) {\n        timeUnit\n        totalReceived {\n          timeUnit\n          nodes {\n            date\n            kind\n            amount {\n              value\n            }\n          }\n        }\n        totalSpent {\n          timeUnit\n          nodes {\n            date\n            kind\n            amount {\n              value\n            }\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').HostReportsPageDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query HostVirtualCardRequestsMetaData($hostSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      legacyId\n    }\n    pending: virtualCardRequests(host: { slug: $hostSlug }, status: [PENDING], limit: 0, offset: 0) {\n      totalCount\n    }\n    approved: virtualCardRequests(host: { slug: $hostSlug }, status: [APPROVED], limit: 0, offset: 0) {\n      totalCount\n    }\n    rejected: virtualCardRequests(host: { slug: $hostSlug }, status: [REJECTED], limit: 0, offset: 0) {\n      totalCount\n    }\n  }\n"): typeof import('./graphql').HostVirtualCardRequestsMetaDataDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query HostVirtualCardRequests(\n    $hostSlug: String!\n    $account: [AccountReferenceInput]\n    $status: [VirtualCardRequestStatus]\n    $limit: Int!\n    $offset: Int!\n  ) {\n    host(slug: $hostSlug) {\n      id\n      legacyId\n    }\n    virtualCardRequests(\n      host: { slug: $hostSlug }\n      collective: $account\n      status: $status\n      limit: $limit\n      offset: $offset\n    ) {\n      totalCount\n      limit\n      offset\n      nodes {\n        id\n        legacyId\n        purpose\n        notes\n        status\n        currency\n        spendingLimitAmount {\n          valueInCents\n          currency\n        }\n        spendingLimitInterval\n        createdAt\n        account {\n          id\n          name\n          slug\n          imageUrl\n          ...AccountHoverCardFields\n        }\n        host {\n          id\n          name\n          slug\n          imageUrl\n        }\n        assignee {\n          id\n          name\n          email\n          slug\n          imageUrl\n          ...AccountHoverCardFields\n        }\n      }\n    }\n  }\n  \n"): typeof import('./graphql').HostVirtualCardRequestsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query HostedVirtualCardAccounts($slug: String) {\n    host(slug: $slug) {\n      id\n      hostedVirtualCardCollectives(limit: 500) {\n        totalCount\n        limit\n        offset\n        nodes {\n          id\n          ...AccountHoverCardFields\n        }\n      }\n    }\n  }\n  \n"): typeof import('./graphql').HostedVirtualCardAccountsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query HostedVirtualCardsMetaData($slug: String) {\n    host(slug: $slug) {\n      id\n      slug\n      currency\n      active: hostedVirtualCards(status: [ACTIVE], limit: 0) {\n        totalCount\n      }\n      inactive: hostedVirtualCards(status: [INACTIVE], limit: 0) {\n        totalCount\n      }\n      canceled: hostedVirtualCards(status: [CANCELED], limit: 0) {\n        totalCount\n      }\n    }\n  }\n"): typeof import('./graphql').HostedVirtualCardsMetaDataDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query HostedVirtualCards(\n    $slug: String\n    $limit: Int!\n    $offset: Int!\n    $account: [AccountReferenceInput]\n    $status: [VirtualCardStatus]\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $amountFrom: AmountInput\n    $amountTo: AmountInput\n    $hasMissingReceipts: Boolean\n    $searchTerm: String\n    $orderBy: ChronologicalOrderInput\n  ) {\n    host(slug: $slug) {\n      id\n      legacyId\n      slug\n      name\n      imageUrl\n      currency\n      settings\n      stripe {\n        username\n      }\n      hostedVirtualCards(\n        limit: $limit\n        offset: $offset\n        collectiveAccountIds: $account\n        status: $status\n        withExpensesDateFrom: $dateFrom\n        withExpensesDateTo: $dateTo\n        spentAmountFrom: $amountFrom\n        spentAmountTo: $amountTo\n        hasMissingReceipts: $hasMissingReceipts\n        searchTerm: $searchTerm\n        orderBy: $orderBy\n      ) {\n        totalCount\n        limit\n        offset\n        nodes {\n          id\n          name\n          last4\n          data\n          status\n          privateData\n          provider\n          spendingLimitAmount\n          spendingLimitInterval\n          spendingLimitRenewsOn\n          remainingLimit\n          currency\n          createdAt\n          account {\n            id\n            name\n            slug\n            imageUrl\n            ...AccountHoverCardFields\n          }\n          assignee {\n            id\n            name\n            email\n            slug\n            imageUrl\n            ...AccountHoverCardFields\n          }\n        }\n      }\n    }\n  }\n  \n"): typeof import('./graphql').HostedVirtualCardsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query DashboardVendors(\n    $slug: String!\n    $searchTerm: String\n    $isArchived: Boolean\n    $includePotentialVendors: Boolean!\n    $limit: Int\n    $offset: Int\n  ) {\n    account(slug: $slug) {\n      id\n      ... on Organization {\n        host {\n          id\n          name\n          legalName\n          slug\n          type\n          expensePolicy\n          settings\n          currency\n          features {\n            id\n            MULTI_CURRENCY_EXPENSES\n          }\n          location {\n            id\n            address\n            country\n          }\n          transferwise {\n            id\n            availableCurrencies\n          }\n          supportedPayoutMethods\n          isTrustedHost\n          vendors(searchTerm: $searchTerm, isArchived: $isArchived, limit: $limit, offset: $offset)\n            @skip(if: $includePotentialVendors) {\n            totalCount\n            offset\n            limit\n            nodes {\n              id\n              ...VendorFields\n            }\n          }\n          potentialVendors @include(if: $includePotentialVendors) {\n            nodes {\n              id\n              slug\n              name\n              type\n              description\n              tags\n              imageUrl(height: 96)\n              isArchived\n              createdAt\n            }\n          }\n        }\n      }\n    }\n  }\n  \n"): typeof import('./graphql').DashboardVendorsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation EditAccountFee($account: AccountReferenceInput!, $hostFeePercent: Float!, $isCustomFee: Boolean!) {\n    editAccountFeeStructure(account: $account, hostFeePercent: $hostFeePercent, isCustomFee: $isCustomFee) {\n      id\n      ... on AccountWithHost {\n        hostFeesStructure\n        hostFeePercent\n      }\n      childrenAccounts {\n        nodes {\n          id\n          ... on AccountWithHost {\n            hostFeesStructure\n            hostFeePercent\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').EditAccountFeeDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ProcessHostApplicationFields on AccountWithHost {\n    isActive\n    approvedAt\n    isApproved\n    host {\n      id\n    }\n  }\n"): typeof import('./graphql').ProcessHostApplicationFieldsFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query HostApplicationsMetadata($hostSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      slug\n      name\n      type\n      settings\n      policies {\n        id\n        COLLECTIVE_MINIMUM_ADMINS {\n          numberOfAdmins\n        }\n      }\n\n      pending: hostApplications(limit: 0, offset: 0, status: PENDING) {\n        totalCount\n      }\n      approved: hostApplications(limit: 0, offset: 0, status: APPROVED) {\n        totalCount\n      }\n      rejected: hostApplications(limit: 0, offset: 0, status: REJECTED) {\n        totalCount\n      }\n    }\n  }\n"): typeof import('./graphql').HostApplicationsMetadataDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query HostApplications(\n    $hostSlug: String!\n    $limit: Int!\n    $offset: Int!\n    $orderBy: ChronologicalOrderInput\n    $searchTerm: String\n    $status: HostApplicationStatus\n  ) {\n    host(slug: $hostSlug) {\n      id\n\n      hostApplications(limit: $limit, offset: $offset, orderBy: $orderBy, status: $status, searchTerm: $searchTerm) {\n        offset\n        limit\n        totalCount\n        nodes {\n          id\n          message\n          customData\n          status\n          createdAt\n          account {\n            id\n            legacyId\n            name\n            slug\n            website\n            description\n            type\n            imageUrl\n            createdAt\n            ... on AccountWithHost {\n              ...ProcessHostApplicationFields\n            }\n            memberInvitations(role: [ADMIN]) {\n              id\n              role\n            }\n            admins: members(role: ADMIN) {\n              totalCount\n              nodes {\n                id\n                account {\n                  id\n                  type\n                  slug\n                  name\n                  imageUrl\n                  ...AccountHoverCardFields\n                }\n              }\n            }\n            ...AccountHoverCardFields\n          }\n        }\n      }\n    }\n  }\n  \n  \n"): typeof import('./graphql').HostApplicationsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ProcessHostApplication(\n    $host: AccountReferenceInput!\n    $account: AccountReferenceInput!\n    $action: ProcessHostApplicationAction!\n    $message: String\n  ) {\n    processHostApplication(host: $host, account: $account, action: $action, message: $message) {\n      account {\n        id\n        ... on AccountWithHost {\n          ...ProcessHostApplicationFields\n        }\n      }\n      conversation {\n        id\n        slug\n      }\n    }\n  }\n  \n"): typeof import('./graphql').ProcessHostApplicationDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment HostedCollectiveFields on Account {\n    id\n    legacyId\n    name\n    slug\n    website\n    type\n    currency\n    imageUrl(height: 96)\n    isFrozen\n    tags\n    settings\n    createdAt\n    stats {\n      id\n      balance {\n        valueInCents\n        currency\n      }\n    }\n    ... on AccountWithHost {\n      hostFeesStructure\n      hostFeePercent\n      approvedAt\n      hostAgreements {\n        totalCount\n        nodes {\n          id\n          title\n          attachment {\n            id\n            url\n            name\n            type\n          }\n        }\n      }\n      host {\n        id\n        legacyId\n        name\n      }\n    }\n    ... on AccountWithContributions {\n      totalFinancialContributors\n    }\n    childrenAccounts {\n      nodes {\n        id\n        slug\n        name\n        type\n        stats {\n          id\n          balance {\n            valueInCents\n            currency\n          }\n        }\n        ... on AccountWithHost {\n          hostFeesStructure\n          hostFeePercent\n          approvedAt\n        }\n        members(role: [ADMIN]) {\n          nodes {\n            id\n            account {\n              id\n              ...AccountHoverCardFields\n            }\n          }\n        }\n      }\n    }\n    members(role: [ADMIN]) {\n      nodes {\n        id\n        account {\n          id\n          ...AccountHoverCardFields\n        }\n      }\n    }\n    ... on AccountWithParent {\n      parent {\n        id\n        slug\n        name\n      }\n    }\n  }\n  \n"): typeof import('./graphql').HostedCollectiveFieldsFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query HostedCollectivesMetadata($hostSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      all: hostedAccounts(limit: 1, accountType: [COLLECTIVE, FUND]) {\n        totalCount\n      }\n      active: hostedAccounts(limit: 1, accountType: [COLLECTIVE, FUND], isFrozen: false) {\n        totalCount\n      }\n      frozen: hostedAccounts(limit: 1, isFrozen: true) {\n        totalCount\n      }\n      unhosted: hostedAccounts(limit: 1, accountType: [COLLECTIVE, FUND], isUnhosted: true) {\n        totalCount\n      }\n    }\n  }\n"): typeof import('./graphql').HostedCollectivesMetadataDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query HostedCollectives(\n    $hostSlug: String!\n    $limit: Int!\n    $offset: Int!\n    $orderBy: OrderByInput\n    $hostFeesStructure: HostFeeStructure\n    $searchTerm: String\n    $type: [AccountType]\n    $isApproved: Boolean\n    $isFrozen: Boolean\n    $isUnhosted: Boolean\n  ) {\n    host(slug: $hostSlug) {\n      id\n      legacyId\n      slug\n      name\n      currency\n      isHost\n      type\n      settings\n      hostFeePercent\n      plan {\n        id\n        hostFees\n        hostFeeSharePercent\n      }\n      hostedAccounts(\n        limit: $limit\n        offset: $offset\n        searchTerm: $searchTerm\n        hostFeesStructure: $hostFeesStructure\n        accountType: $type\n        orderBy: $orderBy\n        isApproved: $isApproved\n        isFrozen: $isFrozen\n        isUnhosted: $isUnhosted\n      ) {\n        offset\n        limit\n        totalCount\n        nodes {\n          id\n          ...HostedCollectiveFields\n        }\n      }\n    }\n  }\n\n  \n"): typeof import('./graphql').HostedCollectivesDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query HostedCollectiveDetail($id: String!) {\n    account(id: $id) {\n      id\n      ...HostedCollectiveFields\n    }\n  }\n\n  \n"): typeof import('./graphql').HostedCollectiveDetailDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query DashboardContributionsMetadata($slug: String!, $filter: AccountOrdersFilter!) {\n    account(slug: $slug) {\n      id\n      legacyId\n      slug\n      name\n      type\n      settings\n      imageUrl\n      currency\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n        }\n      }\n      ALL: orders(filter: $filter) {\n        totalCount\n      }\n      RECURRING: orders(filter: $filter, onlyActiveSubscriptions: true, includeIncognito: true) {\n        totalCount\n      }\n      ONETIME: orders(filter: $filter, frequency: ONETIME, status: [PAID], includeIncognito: true, minAmount: 1) {\n        totalCount\n      }\n      CANCELED: orders(filter: $filter, status: [CANCELLED], includeIncognito: true) {\n        totalCount\n      }\n    }\n  }\n"): typeof import('./graphql').DashboardContributionsMetadataDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query DashboardRecurringContributions(\n    $slug: String!\n    $searchTerm: String\n    $offset: Int\n    $limit: Int\n    $filter: AccountOrdersFilter!\n    $frequency: ContributionFrequency\n    $status: [OrderStatus!]\n    $onlyActiveSubscriptions: Boolean\n    $includeIncognito: Boolean\n    $minAmount: Int\n    $maxAmount: Int\n    $paymentMethod: PaymentMethodReferenceInput\n  ) {\n    account(slug: $slug) {\n      id\n      orders(\n        filter: $filter\n        frequency: $frequency\n        status: $status\n        onlyActiveSubscriptions: $onlyActiveSubscriptions\n        includeIncognito: $includeIncognito\n        minAmount: $minAmount\n        maxAmount: $maxAmount\n        searchTerm: $searchTerm\n        offset: $offset\n        limit: $limit\n        paymentMethod: $paymentMethod\n      ) {\n        totalCount\n        nodes {\n          id\n          ...ManagedOrderFields\n        }\n      }\n    }\n  }\n  \n"): typeof import('./graphql').DashboardRecurringContributionsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query HostContributions(\n    $hostSlug: String\n    $limit: Int!\n    $offset: Int!\n    $status: [OrderStatus]\n    $minAmount: Int\n    $maxAmount: Int\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $searchTerm: String\n    $orderBy: ChronologicalOrderInput\n    $frequency: ContributionFrequency\n  ) {\n    host(slug: $hostSlug) {\n      id\n      slug\n      currency\n      legacyId\n      name\n      isHost\n      accountingCategories {\n        nodes {\n          id\n          name\n          code\n          friendlyName\n          kind\n        }\n      }\n    }\n    orders(\n      account: { slug: $hostSlug }\n      includeHostedAccounts: true\n      filter: INCOMING\n      status: $status\n      searchTerm: $searchTerm\n      limit: $limit\n      offset: $offset\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n      minAmount: $minAmount\n      maxAmount: $maxAmount\n      orderBy: $orderBy\n      frequency: $frequency\n    ) {\n      totalCount\n      nodes {\n        id\n        legacyId\n        description\n        createdAt\n        status\n        accountingCategory {\n          id\n          name\n          code\n          friendlyName\n        }\n        ...ConfirmContributionFields\n        paymentMethod {\n          id\n          providerType\n        }\n        fromAccount {\n          id\n          slug\n          name\n          imageUrl\n          type\n          isIncognito\n          ... on Individual {\n            isGuest\n            emails\n          }\n          ...AccountHoverCardFields\n        }\n        pendingContributionData {\n          expectedAt\n          paymentMethod\n          ponumber\n          memo\n          fromAccountInfo {\n            name\n            email\n          }\n        }\n        toAccount {\n          id\n          slug\n          name\n          imageUrl\n          type\n          isHost\n          ... on AccountWithHost {\n            bankTransfersHostFeePercent: hostFeePercent(paymentMethodType: MANUAL)\n          }\n          ...AccountHoverCardFields\n        }\n        permissions {\n          id\n          canMarkAsExpired\n          canMarkAsPaid\n          canUpdateAccountingCategory\n        }\n      }\n    }\n  }\n  \n  \n"): typeof import('./graphql').HostContributionsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query OrdersMetaData($hostSlug: String) {\n    account(slug: $hostSlug) {\n      id\n      slug\n      currency\n      legacyId\n      name\n      isHost\n    }\n    all: orders(account: { slug: $hostSlug }, includeHostedAccounts: true, filter: INCOMING, limit: 0) {\n      totalCount\n    }\n    pending: orders(\n      account: { slug: $hostSlug }\n      includeHostedAccounts: true\n      filter: INCOMING\n      status: PENDING\n      limit: 0\n    ) {\n      totalCount\n    }\n    disputed: orders(\n      account: { slug: $hostSlug }\n      includeHostedAccounts: true\n      filter: INCOMING\n      status: DISPUTED\n      limit: 0\n    ) {\n      totalCount\n    }\n    in_review: orders(\n      account: { slug: $hostSlug }\n      includeHostedAccounts: true\n      filter: INCOMING\n      status: IN_REVIEW\n      limit: 0\n    ) {\n      totalCount\n    }\n  }\n"): typeof import('./graphql').OrdersMetaDataDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AccountExpenses(\n    $account: AccountReferenceInput\n    $fromAccount: AccountReferenceInput\n    $limit: Int!\n    $offset: Int!\n    $type: ExpenseType\n    $tags: [String]\n    $status: ExpenseStatusFilter\n    $minAmount: Int\n    $maxAmount: Int\n    $payoutMethodType: PayoutMethodType\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $searchTerm: String\n    $orderBy: ChronologicalOrderInput\n    $chargeHasReceipts: Boolean\n    $virtualCards: [VirtualCardReferenceInput]\n    $createdByAccount: AccountReferenceInput\n    $includeChildrenExpenses: Boolean\n    $fetchHostForExpenses: Boolean!\n    $hasAmountInCreatedByAccountCurrency: Boolean!\n  ) {\n    expenses(\n      account: $account\n      fromAccount: $fromAccount\n      limit: $limit\n      offset: $offset\n      type: $type\n      tag: $tags\n      status: $status\n      minAmount: $minAmount\n      maxAmount: $maxAmount\n      payoutMethodType: $payoutMethodType\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n      searchTerm: $searchTerm\n      orderBy: $orderBy\n      chargeHasReceipts: $chargeHasReceipts\n      virtualCards: $virtualCards\n      createdByAccount: $createdByAccount\n      includeChildrenExpenses: $includeChildrenExpenses\n    ) {\n      totalCount\n      offset\n      limit\n      nodes {\n        id\n        ...ExpensesListFieldsFragment\n        amountInCreatedByAccountCurrency: amountV2(currencySource: CREATED_BY_ACCOUNT)\n          @include(if: $hasAmountInCreatedByAccountCurrency) {\n          value\n          valueInCents\n          currency\n          exchangeRate {\n            date\n            value\n            source\n            isApproximate\n            fromCurrency\n            toCurrency\n          }\n        }\n        host @include(if: $fetchHostForExpenses) {\n          id\n          ...ExpenseHostFields\n        }\n      }\n    }\n  }\n\n  \n  \n"): typeof import('./graphql').AccountExpensesDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AccountExpensesMetadata($accountSlug: String!) {\n    account(slug: $accountSlug) {\n      id\n      slug\n      name\n      imageUrl\n      type\n      currency\n      childrenAccounts {\n        totalCount\n        nodes {\n          id\n          name\n          slug\n          imageUrl\n          currency\n          type\n          isActive\n          isArchived\n        }\n      }\n\n      ... on AccountWithHost {\n        isApproved\n        host {\n          id\n          ...ExpenseHostFields\n        }\n      }\n      ... on Organization {\n        isHost\n        isActive\n        host {\n          id\n          ...ExpenseHostFields\n        }\n      }\n    }\n    expenseTagStats(account: { slug: $accountSlug }) {\n      nodes {\n        id\n        tag\n      }\n    }\n  }\n  \n"): typeof import('./graphql').AccountExpensesMetadataDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query HostDashboardExpenses(\n    $hostSlug: String!\n    $limit: Int!\n    $offset: Int!\n    $type: ExpenseType\n    $tags: [String]\n    $status: ExpenseStatusFilter\n    $minAmount: Int\n    $maxAmount: Int\n    $payoutMethodType: PayoutMethodType\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $searchTerm: String\n    $orderBy: ChronologicalOrderInput\n    $chargeHasReceipts: Boolean\n    $virtualCards: [VirtualCardReferenceInput]\n    $account: AccountReferenceInput\n  ) {\n    expenses(\n      host: { slug: $hostSlug }\n      account: $account\n      limit: $limit\n      offset: $offset\n      type: $type\n      tag: $tags\n      status: $status\n      minAmount: $minAmount\n      maxAmount: $maxAmount\n      payoutMethodType: $payoutMethodType\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n      searchTerm: $searchTerm\n      orderBy: $orderBy\n      chargeHasReceipts: $chargeHasReceipts\n      virtualCards: $virtualCards\n    ) {\n      totalCount\n      offset\n      limit\n      nodes {\n        id\n        ...ExpensesListFieldsFragment\n        ...ExpensesListAdminFieldsFragment\n      }\n    }\n    host(slug: $hostSlug) {\n      id\n      ...ExpenseHostFields\n    }\n  }\n  \n  \n  \n"): typeof import('./graphql').HostDashboardExpensesDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment HostInfoCardFields on Host {\n    id\n    legacyId\n    slug\n    currency\n    location {\n      id\n      address\n      country\n    }\n    paypalPreApproval {\n      id\n      name\n      expiryDate\n      createdAt\n      balance {\n        currency\n        valueInCents\n      }\n    }\n    transferwise {\n      id\n      balances {\n        valueInCents\n        currency\n      }\n    }\n    stripe {\n      issuingBalance {\n        valueInCents\n        currency\n      }\n    }\n    stats {\n      id\n      balance {\n        valueInCents\n      }\n    }\n  }\n"): typeof import('./graphql').HostInfoCardFieldsFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query HostDashboardMetadata($hostSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      ...HostInfoCardFields\n      transferwise {\n        id\n        availableCurrencies\n        amountBatched {\n          valueInCents\n          currency\n        }\n      }\n    }\n    all: expenses(host: { slug: $hostSlug }) {\n      totalCount\n    }\n    ready_to_pay: expenses(host: { slug: $hostSlug }, status: READY_TO_PAY) {\n      totalCount\n    }\n    scheduled_for_payment: expenses(host: { slug: $hostSlug }, status: SCHEDULED_FOR_PAYMENT) {\n      totalCount\n    }\n    on_hold: expenses(host: { slug: $hostSlug }, status: ON_HOLD) {\n      totalCount\n    }\n    incomplete: expenses(host: { slug: $hostSlug }, status: INCOMPLETE) {\n      totalCount\n    }\n    error: expenses(host: { slug: $hostSlug }, status: ERROR) {\n      totalCount\n    }\n    paid: expenses(host: { slug: $hostSlug }, status: PAID) {\n      totalCount\n    }\n\n    hostedAccounts: accounts(host: { slug: $hostSlug }, orderBy: { field: ACTIVITY, direction: DESC }) {\n      nodes {\n        id\n        ...AccountHoverCardFields\n      }\n    }\n\n    expenseTags: expenseTagStats(host: { slug: $hostSlug }) {\n      nodes {\n        id\n        tag\n      }\n    }\n  }\n\n  \n  \n"): typeof import('./graphql').HostDashboardMetadataDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Timeline($slug: String!, $limit: Int, $dateTo: DateTime, $classes: [ActivityClassType!]) {\n    account(slug: $slug) {\n      id\n      feed(limit: $limit, dateTo: $dateTo, classes: $classes) {\n        id\n        createdAt\n        type\n        data\n        isSystem\n        fromAccount {\n          id\n          name\n          slug\n          type\n          isIncognito\n          ...AccountHoverCardFields\n\n          imageUrl\n          ... on Individual {\n            isGuest\n          }\n        }\n        host {\n          id\n          name\n          slug\n          type\n        }\n        account {\n          id\n          name\n          slug\n          type\n          isIncognito\n          ...AccountHoverCardFields\n          imageUrl\n          ... on Individual {\n            isGuest\n          }\n          ... on AccountWithParent {\n            parent {\n              id\n              slug\n              name\n              type\n            }\n          }\n        }\n        expense {\n          id\n          legacyId\n          description\n          amountV2 {\n            valueInCents\n            currency\n          }\n          payee {\n            id\n            name\n            slug\n            imageUrl\n          }\n          account {\n            id\n            name\n            type\n            slug\n            ... on AccountWithParent {\n              parent {\n                id\n                slug\n              }\n            }\n          }\n        }\n        order {\n          id\n          legacyId\n          description\n          toAccount {\n            id\n            name\n            slug\n            ... on AccountWithParent {\n              parent {\n                id\n                slug\n              }\n            }\n          }\n        }\n        update {\n          id\n          legacyId\n          title\n          summary\n          slug\n        }\n        conversation {\n          id\n          title\n          summary\n          slug\n        }\n        individual {\n          id\n          slug\n          name\n          type\n          imageUrl\n          isIncognito\n          ...AccountHoverCardFields\n        }\n      }\n    }\n  }\n  \n"): typeof import('./graphql').TimelineDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CollectiveBalance($slug: String!) {\n    account(slug: $slug) {\n      id\n      name\n      imageUrl\n      slug\n      ...AccountHoverCardFields\n      type\n\n      stats {\n        id\n        balance {\n          currency\n          valueInCents\n        }\n      }\n\n      childrenAccounts {\n        totalCount\n        nodes {\n          id\n          name\n          slug\n          imageUrl\n          isArchived\n          ...AccountHoverCardFields\n          ... on Event {\n            startsAt\n            endsAt\n          }\n          stats {\n            id\n            balance {\n              currency\n              valueInCents\n            }\n          }\n        }\n      }\n    }\n  }\n  \n"): typeof import('./graphql').CollectiveBalanceDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query MetricsPerAccount(\n    $slug: String!\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $compareFrom: DateTime\n    $compareTo: DateTime\n    $includeComparison: Boolean!\n    $includeBalance: Boolean!\n    $includeSpent: Boolean!\n    $includeReceived: Boolean!\n    $includeContributionsCount: Boolean!\n  ) {\n    account(slug: $slug) {\n      id\n      ...AccountMetrics\n\n      childrenAccounts {\n        totalCount\n        nodes {\n          id\n          ...AccountMetrics\n        }\n      }\n    }\n  }\n  fragment AccountMetrics on Account {\n    ...AccountHoverCardFields\n    balance: stats @include(if: $includeBalance) {\n      id\n      current: balance(dateTo: $dateTo) {\n        currency\n        valueInCents\n      }\n      comparison: balance(dateTo: $compareTo) @include(if: $includeComparison) {\n        currency\n        valueInCents\n      }\n    }\n    spent: stats @include(if: $includeSpent) {\n      id\n      current: totalAmountSpent(dateFrom: $dateFrom, dateTo: $dateTo, net: true) @include(if: $includeComparison) {\n        currency\n        valueInCents\n      }\n      comparison: totalAmountSpent(dateFrom: $compareFrom, dateTo: $compareTo, net: true)\n        @include(if: $includeComparison) {\n        currency\n        valueInCents\n      }\n    }\n    received: stats @include(if: $includeReceived) {\n      id\n      current: totalAmountReceived(dateFrom: $dateFrom, dateTo: $dateTo, net: true) @include(if: $includeReceived) {\n        currency\n        valueInCents\n      }\n      comparison: totalAmountReceived(dateFrom: $compareFrom, dateTo: $compareTo, net: true)\n        @include(if: $includeComparison) {\n        currency\n        valueInCents\n      }\n    }\n\n    contributions: stats @include(if: $includeContributionsCount) {\n      id\n      current: contributionsCount(dateFrom: $dateFrom, dateTo: $dateTo)\n      comparison: contributionsCount(dateFrom: $compareFrom, dateTo: $compareTo) @include(if: $includeComparison)\n    }\n  }\n  \n"): typeof import('./graphql').MetricsPerAccountDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query OverviewMetrics(\n    $slug: String!\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $compareFrom: DateTime\n    $compareTo: DateTime\n    $includeComparison: Boolean!\n    $includeChildren: Boolean\n    $includeBalance: Boolean!\n    $includeBalanceTimeseries: Boolean!\n    $includeSpent: Boolean!\n    $includeReceived: Boolean!\n    $includeReceivedTimeseries: Boolean!\n    $includeContributionsCount: Boolean!\n    $timeUnit: TimeUnit\n  ) {\n    account(slug: $slug) {\n      id\n      ...AccountHoverCardFields\n      balance: stats @include(if: $includeBalance) {\n        id\n        current: balance(includeChildren: $includeChildren, dateTo: $dateTo) {\n          currency\n          valueInCents\n        }\n        comparison: balance(includeChildren: $includeChildren, dateTo: $compareTo) @include(if: $includeComparison) {\n          currency\n          valueInCents\n        }\n      }\n      balanceTimeseries: stats @include(if: $includeBalanceTimeseries) {\n        id\n        current: balanceTimeSeries(\n          includeChildren: $includeChildren\n          dateFrom: $dateFrom\n          dateTo: $dateTo\n          timeUnit: $timeUnit\n        ) {\n          dateTo\n          dateFrom\n          timeUnit\n          nodes {\n            date\n            amount {\n              currency\n              value\n            }\n          }\n        }\n        comparison: balanceTimeSeries(\n          includeChildren: $includeChildren\n          dateFrom: $compareFrom\n          dateTo: $compareTo\n          timeUnit: $timeUnit\n        ) @include(if: $includeComparison) {\n          dateTo\n          dateFrom\n          timeUnit\n          nodes {\n            date\n            amount {\n              currency\n              value\n            }\n          }\n        }\n      }\n      spent: stats @include(if: $includeSpent) {\n        id\n        current: totalAmountSpent(includeChildren: $includeChildren, dateFrom: $dateFrom, dateTo: $dateTo, net: true) {\n          currency\n          valueInCents\n        }\n        comparison: totalAmountSpent(\n          includeChildren: $includeChildren\n          dateFrom: $compareFrom\n          dateTo: $compareTo\n          net: true\n        ) @include(if: $includeComparison) {\n          currency\n          valueInCents\n        }\n      }\n      received: stats @include(if: $includeReceived) {\n        id\n        current: totalAmountReceived(\n          includeChildren: $includeChildren\n          dateFrom: $dateFrom\n          dateTo: $dateTo\n          net: true\n        ) @include(if: $includeReceived) {\n          currency\n          valueInCents\n        }\n        comparison: totalAmountReceived(\n          includeChildren: $includeChildren\n          dateFrom: $compareFrom\n          dateTo: $compareTo\n          net: true\n        ) @include(if: $includeComparison) {\n          currency\n          valueInCents\n        }\n      }\n      receivedTimeseries: stats @include(if: $includeReceivedTimeseries) {\n        id\n        current: totalAmountReceivedTimeSeries(\n          includeChildren: $includeChildren\n          dateFrom: $dateFrom\n          dateTo: $dateTo\n          timeUnit: $timeUnit\n          net: true\n        ) {\n          dateTo\n          dateFrom\n          timeUnit\n          nodes {\n            date\n            amount {\n              currency\n              value\n            }\n          }\n        }\n        comparison: totalAmountReceivedTimeSeries(\n          includeChildren: $includeChildren\n          dateFrom: $compareFrom\n          dateTo: $compareTo\n          timeUnit: $timeUnit\n          net: true\n        ) @include(if: $includeComparison) {\n          dateTo\n          dateFrom\n          timeUnit\n          nodes {\n            date\n            amount {\n              currency\n              value\n            }\n          }\n        }\n      }\n\n      contributionsCount: stats @include(if: $includeContributionsCount) {\n        id\n        current: contributionsCount(includeChildren: $includeChildren, dateFrom: $dateFrom, dateTo: $dateTo)\n        comparison: contributionsCount(includeChildren: $includeChildren, dateFrom: $compareFrom, dateTo: $compareTo)\n          @include(if: $includeComparison)\n      }\n    }\n  }\n  \n"): typeof import('./graphql').OverviewMetricsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AccountTransactionsMetaData($slug: String!) {\n    transactions(account: { slug: $slug }, limit: 0) {\n      paymentMethodTypes\n      kinds\n    }\n    account(slug: $slug) {\n      id\n      name\n      legacyId\n      slug\n      currency\n      settings\n    }\n  }\n"): typeof import('./graphql').AccountTransactionsMetaDataDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query HostTransactionsMetaData($slug: String!) {\n    transactions(host: { slug: $slug }, limit: 0) {\n      paymentMethodTypes\n      kinds\n    }\n    host(slug: $slug) {\n      id\n      name\n      legacyId\n      slug\n      currency\n      settings\n    }\n  }\n"): typeof import('./graphql').HostTransactionsMetaDataDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query TransactionDetails($id: String!) {\n    transaction(id: $id) {\n      id\n      legacyId\n      uuid\n      group\n      amount {\n        valueInCents\n        currency\n      }\n      paymentProcessorFee(fetchPaymentProcessorFee: true) {\n        valueInCents\n        currency\n      }\n      hostFee {\n        valueInCents\n        currency\n      }\n      netAmount {\n        valueInCents\n        currency\n      }\n      taxAmount(fetchTax: true) {\n        valueInCents\n        currency\n      }\n      oppositeTransaction {\n        id\n        uuid\n      }\n      paymentMethod {\n        id\n        type\n      }\n      type\n      kind\n      description\n      createdAt\n      clearedAt\n      isRefunded\n      isRefund\n      isInReview\n      isDisputed\n      isOrderRejected\n      account {\n        id\n        name\n        slug\n        isIncognito\n        description\n        type\n        ... on AccountWithHost {\n          host {\n            id\n            name\n            slug\n          }\n          approvedAt\n        }\n        ... on AccountWithParent {\n          parent {\n            id\n            name\n            slug\n          }\n        }\n        ...AccountHoverCardFields\n      }\n      fromAccount {\n        id\n        ... on AccountWithParent {\n          parent {\n            id\n          }\n        }\n      }\n      toAccount {\n        id\n        ... on AccountWithHost {\n          host {\n            id\n          }\n        }\n      }\n      oppositeAccount {\n        id\n        name\n        slug\n        imageUrl\n        type\n        ...AccountHoverCardFields\n      }\n\n      permissions {\n        id\n        canRefund # is this on transaction or related thing?\n        canDownloadInvoice\n        canReject\n      }\n      order {\n        id\n        legacyId\n        status\n        description\n        processedAt\n        createdAt\n        amount {\n          valueInCents\n          currency\n        }\n        toAccount {\n          id\n          slug\n        }\n        fromAccount {\n          id\n          slug\n        }\n      }\n      expense {\n        id\n        status\n        tags\n        type\n        feesPayer\n        amount\n        currency\n        description\n        legacyId\n        # limit: 1 as current best practice to avoid the API fetching entries it doesn't need\n        comments(limit: 1) {\n          totalCount\n        }\n        payoutMethod {\n          id\n          type\n        }\n        account {\n          id\n          slug\n        }\n        createdByAccount {\n          id\n          slug\n        }\n        permissions {\n          id\n        }\n        createdAt\n        payee {\n          id\n          slug\n          imageUrl\n        }\n      }\n      refundTransaction {\n        id\n        createdAt\n      }\n    }\n  }\n  \n"): typeof import('./graphql').TransactionDetailsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RefundTransaction($transaction: TransactionReferenceInput!) {\n    refundTransaction(transaction: $transaction) {\n      id\n    }\n  }\n"): typeof import('./graphql').RefundTransactionDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RejectTransaction($transaction: TransactionReferenceInput!, $message: String) {\n    rejectTransaction(transaction: $transaction, message: $message) {\n      id\n    }\n  }\n"): typeof import('./graphql').RejectTransactionDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TransactionsTableQueryCollectionFragment on TransactionCollection {\n    totalCount\n    offset\n    limit\n    nodes {\n      id\n      uuid\n      kind\n      amount {\n        currency\n        valueInCents\n      }\n      netAmount {\n        currency\n        valueInCents\n      }\n      group\n      type\n      description\n      createdAt\n      isRefunded\n      isRefund\n      isOrderRejected\n      account {\n        id\n        name\n        slug\n        isIncognito\n        imageUrl\n        type\n        ...AccountHoverCardFields\n      }\n      oppositeAccount {\n        id\n        name\n        slug\n        isIncognito\n        imageUrl\n        type\n        ...AccountHoverCardFields\n      }\n      expense {\n        id\n        type\n      }\n      permissions {\n        id\n        canRefund\n        canDownloadInvoice\n        canReject\n      }\n    }\n  }\n  \n"): typeof import('./graphql').TransactionsTableQueryCollectionFragmentFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query TransactionsTable(\n    $hostAccount: AccountReferenceInput\n    $account: [AccountReferenceInput!]\n    $limit: Int!\n    $offset: Int!\n    $type: TransactionType\n    $paymentMethodType: [PaymentMethodType]\n    $minAmount: Int\n    $maxAmount: Int\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $clearedFrom: DateTime\n    $clearedTo: DateTime\n    $searchTerm: String\n    $kind: [TransactionKind]\n    $includeIncognitoTransactions: Boolean\n    $includeGiftCardTransactions: Boolean\n    $includeChildrenTransactions: Boolean\n    $virtualCard: [VirtualCardReferenceInput]\n    $orderBy: ChronologicalOrderInput\n    $group: String\n    $includeHost: Boolean\n    $expenseType: [ExpenseType]\n    $expense: ExpenseReferenceInput\n    $order: OrderReferenceInput\n  ) {\n    transactions(\n      host: $hostAccount\n      account: $account\n      limit: $limit\n      offset: $offset\n      type: $type\n      paymentMethodType: $paymentMethodType\n      minAmount: $minAmount\n      maxAmount: $maxAmount\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n      clearedFrom: $clearedFrom\n      clearedTo: $clearedTo\n      searchTerm: $searchTerm\n      kind: $kind\n      includeIncognitoTransactions: $includeIncognitoTransactions\n      includeGiftCardTransactions: $includeGiftCardTransactions\n      includeChildrenTransactions: $includeChildrenTransactions\n      includeDebts: true\n      virtualCard: $virtualCard\n      orderBy: $orderBy\n      group: $group\n      includeHost: $includeHost\n      expenseType: $expenseType\n      expense: $expense\n      order: $order\n    ) {\n      ...TransactionsTableQueryCollectionFragment\n    }\n  }\n  \n"): typeof import('./graphql').TransactionsTableDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query AccountVirtualCards(\n    $slug: String\n    $limit: Int!\n    $offset: Int!\n    $status: [VirtualCardStatus]\n    $merchantAccount: AccountReferenceInput\n    $dateFrom: DateTime\n    $dateTo: DateTime\n  ) {\n    account(slug: $slug) {\n      id\n      legacyId\n      slug\n      type\n      name\n      imageUrl\n      currency\n      ... on AccountWithHost {\n        isApproved\n        host {\n          legacyId\n          slug\n          id\n          type\n          name\n          imageUrl\n          settings\n          currency\n        }\n      }\n      virtualCards(\n        limit: $limit\n        offset: $offset\n        status: $status\n        merchantAccount: $merchantAccount\n        dateFrom: $dateFrom\n        dateTo: $dateTo\n      ) {\n        totalCount\n        limit\n        offset\n        nodes {\n          id\n          name\n          last4\n          data\n          currency\n          provider\n          privateData\n          createdAt\n          spendingLimitAmount\n          spendingLimitInterval\n          spendingLimitRenewsOn\n          remainingLimit\n          account {\n            id\n            slug\n            name\n            imageUrl\n          }\n          assignee {\n            id\n            name\n            slug\n            imageUrl\n          }\n        }\n      }\n      virtualCardMerchants {\n        nodes {\n          id\n          type\n          slug\n          name\n          currency\n          location {\n            id\n            address\n            country\n          }\n          imageUrl(height: 64)\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').AccountVirtualCardsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation EditVirtualCard(\n    $virtualCard: VirtualCardReferenceInput!\n    $name: String!\n    $limitAmount: AmountInput\n    $limitInterval: VirtualCardLimitInterval\n    $assignee: AccountReferenceInput!\n  ) {\n    editVirtualCard(\n      virtualCard: $virtualCard\n      name: $name\n      limitAmount: $limitAmount\n      limitInterval: $limitInterval\n      assignee: $assignee\n    ) {\n      id\n      name\n      spendingLimitAmount\n      spendingLimitInterval\n      assignee {\n        id\n        name\n        slug\n        imageUrl\n      }\n    }\n  }\n"): typeof import('./graphql').EditVirtualCardDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateVirtualCard(\n    $name: String!\n    $limitAmount: AmountInput!\n    $limitInterval: VirtualCardLimitInterval!\n    $account: AccountReferenceInput!\n    $assignee: AccountReferenceInput!\n    $virtualCardRequest: VirtualCardRequestReferenceInput\n  ) {\n    createVirtualCard(\n      name: $name\n      limitAmount: $limitAmount\n      limitInterval: $limitInterval\n      account: $account\n      assignee: $assignee\n      virtualCardRequest: $virtualCardRequest\n    ) {\n      id\n      name\n      last4\n      data\n      virtualCardRequest {\n        id\n        status\n      }\n    }\n  }\n"): typeof import('./graphql').CreateVirtualCardDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CollectiveMembers($slug: String!) {\n    account(slug: $slug) {\n      id\n      members(role: ADMIN) {\n        nodes {\n          id\n          account {\n            id\n            name\n            imageUrl\n            slug\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').CollectiveMembersDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query VirtualCardsAssignedToCollective($hostSlug: String!, $collectiveSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      allCards: hostedVirtualCards(collectiveAccountIds: [{ slug: $collectiveSlug }], status: [ACTIVE, INACTIVE]) {\n        totalCount\n      }\n      cardsMissingReceipts: hostedVirtualCards(\n        collectiveAccountIds: [{ slug: $collectiveSlug }]\n        status: [ACTIVE, INACTIVE]\n        hasMissingReceipts: true\n      ) {\n        totalCount\n      }\n    }\n  }\n"): typeof import('./graphql').VirtualCardsAssignedToCollectiveDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query VirtualCardPolicies($slug: String) {\n    account(slug: $slug) {\n      id\n      policies {\n        id\n        MAXIMUM_VIRTUAL_CARD_LIMIT_AMOUNT_FOR_INTERVAL {\n          ALL_TIME {\n            valueInCents\n          }\n          DAILY {\n            valueInCents\n          }\n          MONTHLY {\n            valueInCents\n          }\n          PER_AUTHORIZATION {\n            valueInCents\n          }\n          WEEKLY {\n            valueInCents\n          }\n          YEARLY {\n            valueInCents\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').VirtualCardPoliciesDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ManagePaymentMethods($accountSlug: String!) {\n    account(slug: $accountSlug) {\n      id\n      legacyId\n      type\n      slug\n      name\n      currency\n      isHost\n      settings\n      paymentMethods(type: [CREDITCARD, US_BANK_ACCOUNT, SEPA_DEBIT, BACS_DEBIT, GIFTCARD, PREPAID]) {\n        id\n        ...PaymentMethodFields\n      }\n    }\n  }\n\n  fragment PaymentMethodFields on PaymentMethod {\n    id\n    legacyId\n    name\n    data\n    service\n    type\n    balance {\n      valueInCents\n      currency\n    }\n    expiryDate\n    monthlyLimit {\n      valueInCents\n    }\n    account {\n      id\n      slug\n      name\n    }\n    recurringContributions: orders(\n      onlyActiveSubscriptions: true\n      status: [ACTIVE, ERROR, PENDING, REQUIRE_CLIENT_CONFIRMATION]\n    ) {\n      totalCount\n      nodes {\n        id\n        legacyId\n        needsConfirmation\n      }\n    }\n  }\n"): typeof import('./graphql').ManagePaymentMethodsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      mutation ConfirmOrder($order: OrderReferenceInput!) {\n        confirmOrder(order: $order) {\n          order {\n            id\n            status\n            transactions {\n              id\n            }\n            fromAccount {\n              id\n              slug\n            }\n          }\n          stripeError {\n            message\n            account\n            response\n          }\n        }\n      }\n    "): typeof import('./graphql').ConfirmOrderDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment MemberFields on Member {\n    id\n    role\n    since\n    createdAt\n    description\n    inherited\n    account {\n      id\n      name\n      slug\n      type\n      imageUrl(height: 64)\n      ... on Individual {\n        email\n      }\n    }\n  }\n"): typeof import('./graphql').MemberFieldsFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query TeamSection($collectiveSlug: String!, $account: AccountReferenceInput!) {\n    account(slug: $collectiveSlug) {\n      id\n      legacyId\n      slug\n      isFrozen\n      type\n      imageUrl(height: 256)\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          type\n          name\n        }\n      }\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n          name\n          features {\n            id\n            CONTACT_FORM\n          }\n          policies {\n            id\n            COLLECTIVE_MINIMUM_ADMINS {\n              numberOfAdmins\n              applies\n              freeze\n            }\n          }\n        }\n      }\n      members(role: [ADMIN, MEMBER, ACCOUNTANT], limit: 100) {\n        nodes {\n          id\n          ...MemberFields\n        }\n      }\n      childrenAccounts {\n        nodes {\n          id\n          slug\n          type\n          name\n          members(includeInherited: false, role: [ADMIN, MEMBER, ACCOUNTANT], limit: 100) {\n            nodes {\n              id\n              ...MemberFields\n            }\n          }\n        }\n      }\n    }\n    memberInvitations(account: $account) {\n      id\n      role\n      since\n      createdAt\n      description\n      account: memberAccount {\n        id\n        name\n        slug\n        type\n        imageUrl(height: 64)\n        ... on Individual {\n          email\n        }\n      }\n    }\n  }\n  \n"): typeof import('./graphql').TeamSectionDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ResendDraftExpenseInvite($expense: ExpenseReferenceInput!) {\n    resendDraftExpenseInvite(expense: $expense) {\n      id\n    }\n  }\n"): typeof import('./graphql').ResendDraftExpenseInviteDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query QuoteExpense($id: String!) {\n    expense(expense: { id: $id }) {\n      id\n      currency\n      amountInHostCurrency: amountV2(currencySource: HOST) {\n        exchangeRate {\n          value\n          fromCurrency\n          toCurrency\n        }\n      }\n      host {\n        id\n        transferwise {\n          id\n          amountBatched {\n            valueInCents\n            currency\n          }\n          balances {\n            valueInCents\n            currency\n          }\n        }\n      }\n      quote {\n        paymentProcessorFeeAmount {\n          valueInCents\n          currency\n        }\n        sourceAmount {\n          valueInCents\n          currency\n        }\n        estimatedDeliveryAt\n      }\n    }\n  }\n"): typeof import('./graphql').QuoteExpenseDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ValidateTransferRequirements($id: String!, $details: JSON) {\n    expense(expense: { id: $id }) {\n      id\n      validateTransferRequirements(details: $details) {\n        type\n        fields {\n          name\n          group {\n            key\n            name\n            type\n            required\n            example\n            minLength\n            maxLength\n            validationRegexp\n            refreshRequirementsOnChange\n            valuesAllowed {\n              key\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').ValidateTransferRequirementsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RemovePayoutMethod($id: String!) {\n    removePayoutMethod(payoutMethodId: $id) {\n      id\n      isSaved\n    }\n  }\n"): typeof import('./graphql').RemovePayoutMethodDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment LoggedInAccountExpensePayoutFields on Individual {\n    id\n    slug\n    imageUrl\n    type\n    name\n    legalName\n    hasTwoFactorAuth\n    location {\n      id\n      address\n      country\n      structured\n    }\n    payoutMethods {\n      id\n      type\n      name\n      data\n      isSaved\n    }\n    adminMemberships: memberOf(role: ADMIN, includeIncognito: false, accountType: [ORGANIZATION, COLLECTIVE, FUND]) {\n      nodes {\n        id\n        account {\n          id\n          slug\n          imageUrl\n          type\n          name\n          legalName\n          isActive\n          isHost\n          policies {\n            id\n            REQUIRE_2FA_FOR_ADMINS\n          }\n          ... on AccountWithParent {\n            parent {\n              id\n              policies {\n                id\n                REQUIRE_2FA_FOR_ADMINS\n              }\n            }\n          }\n          ... on AccountWithHost {\n            host {\n              id\n              payoutMethods {\n                id\n                type\n                name\n                data\n                isSaved\n              }\n            }\n          }\n          ... on Organization {\n            host {\n              id\n              payoutMethods {\n                id\n                type\n                name\n                data\n                isSaved\n              }\n            }\n          }\n          location {\n            id\n            address\n            country\n            structured\n          }\n          payoutMethods {\n            id\n            type\n            name\n            data\n            isSaved\n          }\n          childrenAccounts {\n            nodes {\n              id\n              slug\n              imageUrl\n              type\n              name\n              isActive\n            }\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').LoggedInAccountExpensePayoutFieldsFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment AccountingCategoryFields on AccountingCategory {\n    id\n    name\n    kind\n    instructions\n    friendlyName\n    code\n    expensesTypes\n  }\n"): typeof import('./graphql').AccountingCategoryFieldsFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ExpenseHostFields on Host {\n    id\n    name\n    legalName\n    slug\n    type\n    currency\n    isHost\n    expensePolicy\n    website\n    settings\n    features {\n      id\n      MULTI_CURRENCY_EXPENSES\n      PAYPAL_PAYOUTS\n    }\n    paypalPreApproval {\n      id\n      balance {\n        currency\n        valueInCents\n      }\n    }\n    location {\n      id\n      address\n      country\n    }\n    transferwise {\n      id\n      availableCurrencies\n    }\n    supportedPayoutMethods\n    isTrustedHost\n    plan {\n      id\n    }\n    expenseAccountingCategories: accountingCategories(kind: EXPENSE) {\n      nodes {\n        id\n        ...AccountingCategoryFields\n      }\n    }\n    policies {\n      id\n      EXPENSE_CATEGORIZATION {\n        requiredForExpenseSubmitters\n        requiredForCollectiveAdmins\n      }\n    }\n  }\n  \n"): typeof import('./graphql').ExpenseHostFieldsFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ExpenseValuesByRoleFragment on ExpenseValuesByRole {\n    id\n    submitter {\n      accountingCategory {\n        ...AccountingCategoryFields\n      }\n    }\n    accountAdmin {\n      accountingCategory {\n        ...AccountingCategoryFields\n      }\n    }\n    hostAdmin {\n      accountingCategory {\n        ...AccountingCategoryFields\n      }\n    }\n  }\n  \n"): typeof import('./graphql').ExpenseValuesByRoleFragmentFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ExpensePageExpenseFields on Expense {\n    id\n    legacyId\n    description\n    longDescription\n    currency\n    type\n    status\n    onHold\n    privateMessage\n    tags\n    amount\n    accountingCategory {\n      id\n      ...AccountingCategoryFields\n    }\n    valuesByRole {\n      id\n      ...ExpenseValuesByRoleFragment\n    }\n    amountInAccountCurrency: amountV2(currencySource: ACCOUNT) {\n      valueInCents\n      currency\n      exchangeRate {\n        date\n        value\n        source\n        isApproximate\n        fromCurrency\n        toCurrency\n      }\n    }\n    createdAt\n    invoiceInfo\n    merchantId\n    requiredLegalDocuments\n    feesPayer\n    draft\n    items {\n      id\n      incurredAt\n      description\n      amount\n      amountV2 {\n        valueInCents\n        currency\n        exchangeRate {\n          date\n          value\n          source\n          fromCurrency\n          toCurrency\n        }\n      }\n      referenceExchangeRate {\n        value\n        fromCurrency\n        toCurrency\n      }\n      url\n      file {\n        id\n        ... on ImageFileInfo {\n          width\n        }\n      }\n    }\n    taxes {\n      id\n      type\n      rate\n      idNumber\n    }\n    attachedFiles {\n      id\n      url\n      name\n      info {\n        id\n        name\n        size\n        ... on ImageFileInfo {\n          width\n        }\n      }\n    }\n    payee {\n      id\n      slug\n      name\n      legalName\n      imageUrl\n      hasImage\n      type\n      isAdmin\n      isActive\n      description\n      ...AccountHoverCardFields\n      location {\n        id\n        address\n        country\n      }\n      payoutMethods {\n        id\n        type\n        name\n        data\n        isSaved\n      }\n\n      # For Collectives, Funds, Events and Projects\n      ... on AccountWithHost {\n        isApproved\n        host {\n          id\n          slug\n          # For Expenses across hosts\n          payoutMethods {\n            id\n            type\n            name\n            data\n            isSaved\n          }\n        }\n      }\n\n      # For Fiscal Hosts\n      ... on Organization {\n        host {\n          id\n        }\n      }\n    }\n    payeeLocation {\n      id\n      address\n      country\n      structured\n    }\n    createdByAccount {\n      id\n      slug\n      name\n      type\n      imageUrl\n      ...AccountHoverCardFields\n    }\n    host {\n      id\n      name\n      legalName\n      slug\n      type\n      website\n      location {\n        id\n        address\n        country\n      }\n    }\n    requestedByAccount {\n      id\n      slug\n      name\n      type\n      imageUrl\n      ...AccountHoverCardFields\n    }\n    approvedBy {\n      id\n      type\n      slug\n      name\n      imageUrl\n      ...AccountHoverCardFields\n    }\n    account {\n      id\n      legacyId\n      slug\n      name\n      type\n      imageUrl\n      hasImage\n      backgroundImageUrl\n      isActive\n      description\n      settings\n      twitterHandle\n      currency\n      expensePolicy\n      supportedExpenseTypes\n      features {\n        id\n        ...NavbarFields\n        MULTI_CURRENCY_EXPENSES\n      }\n      location {\n        id\n        address\n        country\n      }\n\n      stats {\n        id\n        balanceWithBlockedFunds {\n          valueInCents\n          currency\n        }\n      }\n\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          imageUrl\n          backgroundImageUrl\n          twitterHandle\n        }\n      }\n\n      ... on AccountWithHost {\n        isApproved\n        hostAgreements {\n          totalCount\n        }\n        host {\n          id\n          slug\n          legacyId\n          ...ExpenseHostFields\n          transferwise {\n            id\n            availableCurrencies\n          }\n        }\n      }\n\n      # For Hosts with Budget capabilities\n\n      ... on Organization {\n        isHost\n        isActive\n        host {\n          id\n          ...ExpenseHostFields\n          transferwise {\n            id\n            availableCurrencies\n          }\n        }\n      }\n\n      ... on Event {\n        parent {\n          id\n          slug\n          name\n          type\n          imageUrl\n        }\n      }\n      ... on Project {\n        parent {\n          id\n          slug\n          name\n          type\n          imageUrl\n        }\n      }\n      ...AccountHoverCardFields\n    }\n    payoutMethod {\n      id\n      type\n      data\n      isSaved\n    }\n    virtualCard {\n      id\n      name\n      last4\n    }\n    permissions {\n      id\n      canEdit\n      canEditTags\n      canEditAccountingCategory\n      canDelete\n      canSeeInvoiceInfo\n      canApprove\n      canUnapprove\n      canReject\n      canMarkAsSpam\n      canPay\n      canMarkAsUnpaid\n      canMarkAsIncomplete\n      canComment\n      canUnschedulePayment\n      canVerifyDraftExpense\n      canUsePrivateNote\n      canHold\n      canRelease\n      approve {\n        allowed\n        reason\n        reasonDetails\n      }\n    }\n    activities {\n      id\n      type\n      createdAt\n      data\n      account {\n        id\n        slug\n        ... on AccountWithHost {\n          host {\n            id\n            slug\n          }\n        }\n      }\n      individual {\n        id\n        type\n        slug\n        name\n        imageUrl\n        ...AccountHoverCardFields\n      }\n      transaction {\n        id\n        kind\n        type\n        amount {\n          valueInCents\n          currency\n        }\n        platformFee {\n          valueInCents\n          currency\n        }\n        hostFee {\n          valueInCents\n          currency\n        }\n        paymentProcessorFee {\n          valueInCents\n          currency\n        }\n        netAmount {\n          valueInCents\n          currency\n        }\n        taxAmount {\n          valueInCents\n          currency\n        }\n        taxInfo {\n          id\n          rate\n          type\n          percentage\n        }\n        fromAccount {\n          id\n          slug\n          name\n          ... on AccountWithHost {\n            hostFeePercent\n          }\n        }\n        toAccount {\n          id\n          slug\n          name\n          ... on AccountWithHost {\n            hostFeePercent\n          }\n        }\n        expense {\n          id\n          currency\n          amount\n          feesPayer\n        }\n        relatedTransactions(kind: PAYMENT_PROCESSOR_FEE) {\n          id\n          type\n          kind\n          amount {\n            valueInCents\n            currency\n          }\n        }\n      }\n    }\n    recurringExpense {\n      id\n      interval\n      endsAt\n    }\n    securityChecks {\n      level\n      message\n      scope\n      details\n    }\n  }\n\n  \n  \n  \n  \n  \n"): typeof import('./graphql').ExpensePageExpenseFieldsFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ExpensesListFieldsFragment on Expense {\n    id\n    legacyId\n    description\n    status\n    createdAt\n    tags\n    amount\n    comments {\n      totalCount\n    }\n    accountingCategory {\n      id\n      ...AccountingCategoryFields\n    }\n    valuesByRole {\n      id\n      ...ExpenseValuesByRoleFragment\n    }\n    amountInAccountCurrency: amountV2(currencySource: ACCOUNT) {\n      valueInCents\n      currency\n      exchangeRate {\n        date\n        value\n        source\n        isApproximate\n        fromCurrency\n        toCurrency\n      }\n    }\n    currency\n    type\n    requiredLegalDocuments\n    feesPayer\n    account {\n      id\n      name\n      slug\n      createdAt\n      currency\n      type\n      imageUrl\n      stats {\n        id\n        balanceWithBlockedFunds {\n          valueInCents\n          currency\n        }\n      }\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n        }\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n        }\n      }\n      ...AccountHoverCardFields\n    }\n    permissions {\n      id\n      canDelete\n      canApprove\n      canUnapprove\n      canReject\n      canMarkAsSpam\n      canPay\n      canMarkAsUnpaid\n      canMarkAsIncomplete\n      canSeeInvoiceInfo\n      canEditTags\n      canEditAccountingCategory\n      canUnschedulePayment\n      canHold\n      canRelease\n      approve {\n        allowed\n        reason\n        reasonDetails\n      }\n    }\n    payoutMethod {\n      id\n      type\n      data\n      isSaved\n    }\n    payee {\n      id\n      type\n      slug\n      name\n      imageUrl\n      hasImage\n      isAdmin\n      # For Collectives, Funds, Events and Projects\n      ... on AccountWithHost {\n        isApproved\n        host {\n          id\n        }\n      }\n\n      # For Fiscal Hosts\n      ... on Organization {\n        host {\n          id\n        }\n      }\n      ...AccountHoverCardFields\n    }\n    createdByAccount {\n      id\n      type\n      slug\n      name\n      ...AccountHoverCardFields\n    }\n  }\n  \n  \n  \n"): typeof import('./graphql').ExpensesListFieldsFragmentFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ExpensesListAdminFieldsFragment on Expense {\n    id\n    onHold\n    account {\n      id\n      ... on AccountWithHost {\n        hostAgreements {\n          totalCount\n        }\n      }\n    }\n    createdByAccount {\n      id\n      ... on Individual {\n        emails\n      }\n    }\n    payee {\n      id\n      ... on Individual {\n        emails\n      }\n    }\n    payoutMethod {\n      id\n      type\n      data\n    }\n    items {\n      id\n      description\n      incurredAt\n      url\n      amount\n      file {\n        id\n        ... on ImageFileInfo {\n          width\n        }\n      }\n    }\n    taxes {\n      id\n      type\n      rate\n    }\n    attachedFiles {\n      id\n      url\n      name\n      info {\n        id\n        ... on ImageFileInfo {\n          width\n        }\n      }\n    }\n    securityChecks {\n      level\n      message\n      scope\n      details\n    }\n  }\n"): typeof import('./graphql').ExpensesListAdminFieldsFragmentFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation EditExpense($expense: ExpenseUpdateInput!, $draftKey: String) {\n    editExpense(expense: $expense, draftKey: $draftKey) {\n      id\n      ...ExpensePageExpenseFields\n    }\n  }\n\n  \n"): typeof import('./graphql').EditExpenseDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation EditExpenseCategory($expenseId: String!, $category: AccountingCategoryReferenceInput!) {\n    editExpense(expense: { id: $expenseId, accountingCategory: $category }) {\n      id\n      valuesByRole {\n        id\n        ...ExpenseValuesByRoleFragment\n      }\n      accountingCategory {\n        id\n        ...AccountingCategoryFields\n      }\n    }\n  }\n  \n  \n"): typeof import('./graphql').EditExpenseCategoryDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ExpensePage($legacyExpenseId: Int!, $draftKey: String, $offset: Int, $totalPaidExpensesDateFrom: DateTime) {\n    expense(expense: { legacyId: $legacyExpenseId }, draftKey: $draftKey) {\n      id\n      ...ExpensePageExpenseFields\n      comments(limit: 100, offset: $offset) {\n        totalCount\n        nodes {\n          id\n          ...CommentFields\n        }\n      }\n    }\n\n    # As it uses a dedicated variable this needs to be separated from the ExpensePageExpenseFields fragment\n    expensePayeeStats: expense(expense: { legacyId: $legacyExpenseId }) {\n      id\n      payee {\n        id\n        stats {\n          id\n          totalPaidExpenses(dateFrom: $totalPaidExpensesDateFrom) {\n            valueInCents\n            currency\n          }\n          totalPaidInvoices: totalPaidExpenses(expenseType: [INVOICE], dateFrom: $totalPaidExpensesDateFrom) {\n            valueInCents\n            currency\n          }\n          totalPaidReceipts: totalPaidExpenses(expenseType: [RECEIPT], dateFrom: $totalPaidExpensesDateFrom) {\n            valueInCents\n            currency\n          }\n          totalPaidGrants: totalPaidExpenses(expenseType: [GRANT], dateFrom: $totalPaidExpensesDateFrom) {\n            valueInCents\n            currency\n          }\n        }\n      }\n    }\n\n    loggedInAccount {\n      id\n      ...LoggedInAccountExpensePayoutFields\n    }\n  }\n\n  \n  \n  \n"): typeof import('./graphql').ExpensePageDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CreatePendingContributionModal($slug: String!) {\n    host(slug: $slug) {\n      id\n      legacyId\n      type\n      isHost\n      name\n      slug\n      currency\n      settings\n      hostFeePercent\n      orderAccountingCategories: accountingCategories(kind: [CONTRIBUTION, ADDED_FUNDS]) {\n        nodes {\n          id\n          name\n          friendlyName\n          code\n          kind\n        }\n      }\n      plan {\n        id\n        hostFees\n      }\n      policies {\n        id\n        REQUIRE_2FA_FOR_ADMINS\n      }\n      isTrustedHost\n      vendors {\n        totalCount\n        nodes {\n          id\n          ...VendorFields\n        }\n      }\n    }\n  }\n\n  \n"): typeof import('./graphql').CreatePendingContributionModalDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CreatePendingContributionCollective($slug: String!) {\n    account(slug: $slug) {\n      id\n      type\n      currency\n      childrenAccounts {\n        nodes {\n          id\n          type\n          legacyId\n          isHost\n          name\n          slug\n          currency\n          settings\n          imageUrl\n          ... on AccountWithContributions {\n            tiers {\n              nodes {\n                id\n                slug\n                legacyId\n                name\n              }\n            }\n          }\n        }\n      }\n      ... on AccountWithHost {\n        bankTransfersHostFeePercent: hostFeePercent(paymentMethodType: MANUAL)\n        host {\n          id\n          legacyId\n          vendors(forAccount: { slug: $slug }, limit: 5) {\n            nodes {\n              id\n              slug\n              name\n              type\n              description\n              imageUrl(height: 64)\n            }\n          }\n        }\n      }\n      ... on AccountWithContributions {\n        tiers {\n          nodes {\n            id\n            slug\n            legacyId\n            name\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').CreatePendingContributionCollectiveDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreatePendingContribution($order: PendingOrderCreateInput!) {\n    createPendingOrder(order: $order) {\n      legacyId\n      id\n      status\n    }\n  }\n"): typeof import('./graphql').CreatePendingContributionDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation EditPendingContribution($order: PendingOrderEditInput!) {\n    editPendingOrder(order: $order) {\n      legacyId\n      id\n      status\n      ...ConfirmContributionFields\n    }\n  }\n  \n"): typeof import('./graphql').EditPendingContributionDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query DisputedContributionsWarning($hostSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      slug\n      hasDisputedOrders\n      hasInReviewOrders\n    }\n  }\n"): typeof import('./graphql').DisputedContributionsWarningDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ScheduledExpensesBanner($hostSlug: String!, $limit: Int!, $payoutMethodType: PayoutMethodType) {\n    host(slug: $hostSlug) {\n      id\n      currency\n      transferwise {\n        id\n        amountBatched {\n          valueInCents\n          currency\n        }\n      }\n    }\n    expenses(\n      host: { slug: $hostSlug }\n      status: SCHEDULED_FOR_PAYMENT\n      limit: $limit\n      payoutMethodType: $payoutMethodType\n    ) {\n      totalCount\n      offset\n      limit\n      nodes {\n        id\n      }\n    }\n  }\n"): typeof import('./graphql').ScheduledExpensesBannerDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ExpensePipelineOverview($hostSlug: String!, $currency: Currency!) {\n    wiseReadyToPay: expenses(\n      host: { slug: $hostSlug }\n      limit: 0\n      status: READY_TO_PAY\n      payoutMethodType: BANK_ACCOUNT\n    ) {\n      totalCount\n      totalAmount {\n        amount(currency: $currency) {\n          valueInCents\n          currency\n        }\n        amountsByCurrency {\n          valueInCents\n          currency\n        }\n      }\n    }\n    wiseScheduledForPayment: expenses(\n      host: { slug: $hostSlug }\n      limit: 0\n      status: SCHEDULED_FOR_PAYMENT\n      payoutMethodType: BANK_ACCOUNT\n    ) {\n      totalCount\n      totalAmount {\n        amount(currency: $currency) {\n          valueInCents\n          currency\n        }\n        amountsByCurrency {\n          valueInCents\n          currency\n        }\n      }\n    }\n    paypalReadyToPay: expenses(host: { slug: $hostSlug }, limit: 0, status: READY_TO_PAY, payoutMethodType: PAYPAL) {\n      totalCount\n      totalAmount {\n        amount(currency: $currency) {\n          valueInCents\n          currency\n        }\n        amountsByCurrency {\n          valueInCents\n          currency\n        }\n      }\n    }\n    paypalScheduledForPayment: expenses(\n      host: { slug: $hostSlug }\n      limit: 0\n      status: SCHEDULED_FOR_PAYMENT\n      payoutMethodType: PAYPAL\n    ) {\n      totalCount\n      totalAmount {\n        amount(currency: $currency) {\n          valueInCents\n          currency\n        }\n        amountsByCurrency {\n          valueInCents\n          currency\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').ExpensePipelineOverviewDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ExpensesScheduledForPayment($hostSlug: String!) {\n    expenses(host: { slug: $hostSlug }, status: SCHEDULED_FOR_PAYMENT, payoutMethodType: BANK_ACCOUNT) {\n      totalCount\n      nodes {\n        id\n      }\n    }\n  }\n"): typeof import('./graphql').ExpensesScheduledForPaymentDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query MemberInvitationsCount($memberAccount: AccountReferenceInput!) {\n    memberInvitations(memberAccount: $memberAccount) {\n      id\n    }\n  }\n"): typeof import('./graphql').MemberInvitationsCountDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation EditOrderAccountingCategory($order: OrderReferenceInput!, $category: AccountingCategoryReferenceInput) {\n    updateOrderAccountingCategory(order: $order, accountingCategory: $category) {\n      id\n      accountingCategory {\n        id\n        name\n        code\n        friendlyName\n      }\n    }\n  }\n"): typeof import('./graphql').EditOrderAccountingCategoryDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query PaymentMethodPicker($accountSlug: String!, $hostSlug: String!) {\n    account(slug: $accountSlug) {\n      id\n      name\n      paymentMethods(type: [CREDITCARD, US_BANK_ACCOUNT, SEPA_DEBIT, BACS_DEBIT, GIFTCARD, PREPAID, COLLECTIVE]) {\n        id\n        name\n        data\n        service\n        type\n        account {\n          id\n          name\n          slug\n        }\n        balance {\n          value\n          valueInCents\n          currency\n        }\n        limitedToHosts {\n          id\n        }\n        sourcePaymentMethod {\n          id\n          limitedToHosts {\n            id\n          }\n        }\n      }\n    }\n    host(slug: $hostSlug) {\n      id\n      paypalClientId\n      supportedPaymentMethods\n    }\n  }\n"): typeof import('./graphql').PaymentMethodPickerDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ManagedOrderFields on Order {\n    id\n    legacyId\n    nextChargeDate\n    paymentMethod {\n      id\n      service\n      name\n      type\n      expiryDate\n      data\n      balance {\n        value\n        valueInCents\n        currency\n      }\n    }\n    amount {\n      value\n      valueInCents\n      currency\n    }\n    totalAmount {\n      value\n      valueInCents\n      currency\n    }\n    status\n    description\n    createdAt\n    processedAt\n    frequency\n    tier {\n      id\n      name\n    }\n    totalDonations {\n      value\n      valueInCents\n      currency\n    }\n    fromAccount {\n      id\n      name\n      slug\n      isIncognito\n      type\n      ... on Individual {\n        isGuest\n      }\n      ...AccountHoverCardFields\n    }\n    toAccount {\n      id\n      slug\n      name\n      type\n      description\n      tags\n      imageUrl\n      hasImage\n      backgroundImageUrl(height: 256)\n      settings\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n          paypalClientId\n          supportedPaymentMethods\n        }\n      }\n      ... on Organization {\n        host {\n          id\n          slug\n          paypalClientId\n          supportedPaymentMethods\n        }\n      }\n      ...AccountHoverCardFields\n    }\n    platformTipAmount {\n      value\n      valueInCents\n    }\n  }\n  \n"): typeof import('./graphql').ManagedOrderFieldsFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query RecurringContributions($slug: String!) {\n    account(slug: $slug) {\n      id\n      legacyId\n      slug\n      name\n      type\n      settings\n      imageUrl\n      features {\n        id\n        ...NavbarFields\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n        }\n      }\n      orders(filter: OUTGOING, onlySubscriptions: true, includeIncognito: true) {\n        totalCount\n        nodes {\n          id\n          ...ManagedOrderFields\n        }\n      }\n    }\n  }\n  \n  \n"): typeof import('./graphql').RecurringContributionsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ClearCache($account: AccountReferenceInput!, $cacheTypes: [AccountCacheType!]) {\n    clearCacheForAccount(account: $account, type: $cacheTypes) {\n      id\n      slug\n      name\n    }\n  }\n"): typeof import('./graphql').ClearCacheDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment TransactionsQueryCollectionFragment on TransactionCollection {\n    offset\n    limit\n    nodes {\n      id\n      uuid\n      kind\n      amount {\n        currency\n        valueInCents\n      }\n      netAmount {\n        currency\n        valueInCents\n      }\n      taxAmount {\n        valueInCents\n        currency\n      }\n      taxInfo {\n        id\n        rate\n        type\n      }\n      platformFee {\n        currency\n        valueInCents\n      }\n      paymentProcessorFee {\n        currency\n        valueInCents\n      }\n      hostFee {\n        currency\n        valueInCents\n      }\n      type\n      description\n      createdAt\n      isRefunded\n      isRefund\n      isOrderRejected\n      toAccount {\n        id\n        name\n        slug\n        type\n        imageUrl\n        hasImage\n        isIncognito\n        ... on AccountWithParent {\n          parent {\n            id\n            slug\n          }\n        }\n        settings\n        ... on Individual {\n          isGuest\n        }\n        ... on Collective {\n          host {\n            id\n            name\n            slug\n            type\n          }\n        }\n        ... on AccountWithHost {\n          hostFeePercent\n          platformFeePercent\n        }\n        ...AccountHoverCardFields\n      }\n      fromAccount {\n        id\n        name\n        slug\n        type\n        imageUrl\n        hasImage\n        isIncognito\n        ... on Event {\n          parent {\n            id\n          }\n        }\n        ... on Project {\n          parent {\n            id\n          }\n        }\n        ... on Individual {\n          isGuest\n        }\n        ... on AccountWithHost {\n          hostFeePercent\n          platformFeePercent\n        }\n        ...AccountHoverCardFields\n      }\n      host {\n        id\n        name\n        slug\n        type\n        imageUrl\n      }\n      account {\n        id\n        isIncognito\n      }\n      giftCardEmitterAccount {\n        id\n        name\n        slug\n        type\n        imageUrl\n      }\n      permissions {\n        id\n        canRefund\n        canDownloadInvoice\n        canReject\n      }\n      paymentMethod {\n        id\n        type\n      }\n      payoutMethod {\n        id\n        type\n      }\n      order {\n        id\n        legacyId\n        status\n        memo\n        processedAt\n        toAccount {\n          id\n          slug\n        }\n      }\n      expense {\n        id\n        status\n        tags\n        type\n        feesPayer\n        amount\n        currency\n        legacyId\n        # limit: 1 as current best practice to avoid the API fetching entries it doesn't need\n        comments(limit: 1) {\n          totalCount\n        }\n        payoutMethod {\n          id\n          type\n        }\n        account {\n          id\n          slug\n        }\n        createdByAccount {\n          id\n          slug\n        }\n      }\n      relatedTransactions(kind: [HOST_FEE, PAYMENT_PROCESSOR_FEE, PAYMENT_PROCESSOR_COVER, TAX]) {\n        id\n        type\n        kind\n        netAmount {\n          currency\n          valueInCents\n        }\n      }\n    }\n  }\n  \n"): typeof import('./graphql').TransactionsQueryCollectionFragmentFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AddAuthenticatorAppToIndividual($account: AccountReferenceInput!, $token: String!) {\n    addTwoFactorAuthTokenToIndividual(account: $account, token: $token, type: TOTP) {\n      account {\n        id\n        hasTwoFactorAuth\n        twoFactorMethods {\n          id\n          method\n          createdAt\n          description\n          icon\n        }\n      }\n      recoveryCodes\n    }\n  }\n"): typeof import('./graphql').AddAuthenticatorAppToIndividualDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateWebAuthnRegistrationOptions($account: AccountReferenceInput!) {\n    createWebAuthnRegistrationOptions(account: $account)\n  }\n"): typeof import('./graphql').CreateWebAuthnRegistrationOptionsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AddTwoFactorAuthToIndividual($account: AccountReferenceInput!, $token: String!) {\n    addTwoFactorAuthTokenToIndividual(account: $account, token: $token, type: WEBAUTHN) {\n      account {\n        id\n        hasTwoFactorAuth\n        twoFactorMethods {\n          id\n          method\n          name\n          createdAt\n          description\n          icon\n        }\n      }\n      recoveryCodes\n    }\n  }\n"): typeof import('./graphql').AddTwoFactorAuthToIndividualDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RegenerateRecoveryCodes {\n    regenerateRecoveryCodes\n  }\n"): typeof import('./graphql').RegenerateRecoveryCodesDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RemoveTwoFactorAuthentication($account: AccountReferenceInput!) {\n    removeTwoFactorAuthTokenFromIndividual(account: $account) {\n      id\n      hasTwoFactorAuth\n      twoFactorMethods {\n        id\n        method\n        name\n        createdAt\n        description\n        icon\n      }\n    }\n  }\n"): typeof import('./graphql').RemoveTwoFactorAuthenticationDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RemoveTwoFactorAuthFromIndividual(\n    $account: AccountReferenceInput!\n    $userTwoFactorMethod: UserTwoFactorMethodReferenceInput!\n  ) {\n    removeTwoFactorAuthTokenFromIndividual(account: $account, userTwoFactorMethod: $userTwoFactorMethod) {\n      id\n      hasTwoFactorAuth\n      twoFactorMethods {\n        id\n        method\n        name\n        createdAt\n        description\n        icon\n      }\n    }\n  }\n"): typeof import('./graphql').RemoveTwoFactorAuthFromIndividualDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation EditTwoFactorAuthenticationMethod($userTwoFactorMethod: UserTwoFactorMethodReferenceInput!, $name: String!) {\n    editTwoFactorAuthenticationMethod(userTwoFactorMethod: $userTwoFactorMethod, name: $name) {\n      id\n      hasTwoFactorAuth\n      twoFactorMethods {\n        id\n        method\n        name\n        createdAt\n        description\n        icon\n      }\n    }\n  }\n"): typeof import('./graphql').EditTwoFactorAuthenticationMethodDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query OrganizationDetails($organizationSlug: String!) {\n    account(slug: $organizationSlug) {\n      id\n      type\n      name\n      slug\n      createdAt\n      orders {\n        totalCount\n      }\n      expenses(status: PAID, direction: SUBMITTED) {\n        totalCount\n      }\n      members(role: ADMIN, includeInherited: true) {\n        nodes {\n          id\n          role\n          account {\n            id\n            name\n            slug\n            type\n            imageUrl(height: 64)\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').OrganizationDetailsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ConvertOrganizationToVendor($organization: AccountReferenceInput!, $host: AccountReferenceInput!) {\n    convertOrganizationToVendor(organization: $organization, host: $host) {\n      id\n      ...VendorFields\n    }\n  }\n  \n"): typeof import('./graphql').ConvertOrganizationToVendorDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateVendor($vendor: VendorCreateInput!, $host: AccountReferenceInput!) {\n    createVendor(host: $host, vendor: $vendor) {\n      id\n      ...VendorFields\n    }\n  }\n  \n"): typeof import('./graphql').CreateVendorDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation EditVendor($vendor: VendorEditInput!) {\n    editVendor(vendor: $vendor) {\n      id\n      ...VendorFields\n    }\n  }\n  \n"): typeof import('./graphql').EditVendorDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment VendorFields on Vendor {\n    id\n    slug\n    name\n    legalName\n    type\n    description\n    tags\n    imageUrl(height: 96)\n    hasImage\n    isArchived\n    createdAt\n\n    location {\n      id\n      address\n      country\n      name\n      structured\n    }\n\n    createdByAccount {\n      id\n      slug\n      name\n      imageUrl\n      ...AccountHoverCardFields\n    }\n\n    vendorInfo {\n      contact {\n        name\n        email\n      }\n      taxFormUrl\n      taxFormRequired\n      taxType\n      taxId\n      notes\n    }\n\n    payoutMethods {\n      id\n      type\n      name\n      data\n    }\n\n    orders(filter: OUTGOING, limit: 1) {\n      totalCount\n    }\n\n    expenses(status: PAID, direction: SUBMITTED, limit: 1) {\n      totalCount\n    }\n  }\n  \n"): typeof import('./graphql').VendorFieldsFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation SetVendorArchive($vendor: VendorEditInput!, $archive: Boolean!) {\n    editVendor(archive: $archive, vendor: $vendor) {\n      id\n      ...VendorFields\n    }\n  }\n  \n"): typeof import('./graphql').SetVendorArchiveDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query VirtualCardRequest($virtualCardRequest: VirtualCardRequestReferenceInput!) {\n    virtualCardRequest(virtualCardRequest: $virtualCardRequest) {\n      id\n      purpose\n      notes\n      status\n      currency\n      spendingLimitAmount {\n        valueInCents\n        currency\n      }\n      spendingLimitInterval\n      createdAt\n      account {\n        id\n        name\n        slug\n        imageUrl\n        ...AccountHoverCardFields\n      }\n      assignee {\n        id\n        name\n        email\n        slug\n        imageUrl\n        ...AccountHoverCardFields\n      }\n      host {\n        id\n        name\n        slug\n        imageUrl\n      }\n    }\n  }\n  \n"): typeof import('./graphql').VirtualCardRequestDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RejectVirtualCardRequest($virtualCardRequest: VirtualCardRequestReferenceInput!) {\n    rejectVirtualCardRequest(virtualCardRequest: $virtualCardRequest) {\n      id\n      status\n    }\n  }\n"): typeof import('./graphql').RejectVirtualCardRequestDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query VirtualCardDrawer($virtualCard: VirtualCardReferenceInput!) {\n    virtualCard(virtualCard: $virtualCard) {\n      id\n      name\n      last4\n      data\n      privateData\n      provider\n      spendingLimitAmount\n      spendingLimitInterval\n      spendingLimitRenewsOn\n      remainingLimit\n      currency\n      createdAt\n      status\n      account {\n        id\n        name\n        slug\n        imageUrl\n        ...AccountHoverCardFields\n      }\n      assignee {\n        id\n        name\n        email\n        slug\n        imageUrl\n        ...AccountHoverCardFields\n      }\n      host {\n        id\n        slug\n        stripe {\n          username\n        }\n      }\n    }\n  }\n  \n"): typeof import('./graphql').VirtualCardDrawerDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CollectiveContactPage($collectiveSlug: String!) {\n    account(slug: $collectiveSlug, throwIfMissing: false) {\n      id\n      slug\n      name\n      type\n      permissions {\n        id\n        contact {\n          allowed\n        }\n      }\n      description\n      settings\n      imageUrl\n      twitterHandle\n      features {\n        id\n        ...NavbarFields\n      }\n    }\n  }\n  \n"): typeof import('./graphql').CollectiveContactPageDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ExpensesPage(\n    $collectiveSlug: String!\n    $account: AccountReferenceInput\n    $fromAccount: AccountReferenceInput\n    $limit: Int!\n    $offset: Int!\n    $type: ExpenseType\n    $tags: [String]\n    $status: ExpenseStatusFilter\n    $minAmount: Int\n    $maxAmount: Int\n    $payoutMethodType: PayoutMethodType\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $searchTerm: String\n    $orderBy: ChronologicalOrderInput\n    $chargeHasReceipts: Boolean\n    $virtualCards: [VirtualCardReferenceInput]\n    $createdByAccount: AccountReferenceInput\n  ) {\n    account(slug: $collectiveSlug) {\n      id\n      legacyId\n      slug\n      type\n      imageUrl\n      backgroundImageUrl\n      twitterHandle\n      name\n      currency\n      isArchived\n      isActive\n      settings\n      createdAt\n      supportedExpenseTypes\n      expensesTags {\n        id\n        tag\n      }\n      features {\n        id\n        ...NavbarFields\n      }\n\n      stats {\n        id\n        balanceWithBlockedFunds {\n          valueInCents\n          currency\n        }\n      }\n\n      ... on AccountWithHost {\n        isApproved\n        host {\n          id\n          ...ExpenseHostFields\n        }\n      }\n\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          imageUrl\n          backgroundImageUrl\n          twitterHandle\n        }\n      }\n\n      ... on Organization {\n        # We add that for hasFeature\n        isHost\n        isActive\n        host {\n          id\n          ...ExpenseHostFields\n        }\n      }\n\n      ... on Event {\n        parent {\n          id\n          name\n          slug\n          type\n        }\n      }\n\n      ... on Project {\n        parent {\n          id\n          name\n          slug\n          type\n        }\n      }\n    }\n    expenses(\n      account: $account\n      fromAccount: $fromAccount\n      limit: $limit\n      offset: $offset\n      type: $type\n      tag: $tags\n      status: $status\n      minAmount: $minAmount\n      maxAmount: $maxAmount\n      payoutMethodType: $payoutMethodType\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n      searchTerm: $searchTerm\n      orderBy: $orderBy\n      chargeHasReceipts: $chargeHasReceipts\n      virtualCards: $virtualCards\n      createdByAccount: $createdByAccount\n    ) {\n      totalCount\n      offset\n      limit\n      nodes {\n        id\n        ...ExpensesListFieldsFragment\n      }\n    }\n    # limit: 1 as current best practice to avoid the API fetching entries it doesn't need\n    # TODO: We don't need to try and fetch this field on non-host accounts (should use a ... on Host)\n    scheduledExpenses: expenses(\n      host: { slug: $collectiveSlug }\n      status: SCHEDULED_FOR_PAYMENT\n      payoutMethodType: BANK_ACCOUNT\n      limit: 1\n    ) {\n      totalCount\n    }\n  }\n\n  \n  \n  \n"): typeof import('./graphql').ExpensesPageDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query OrderPage($legacyId: Int!, $collectiveSlug: String!) {\n    order(order: { legacyId: $legacyId }) {\n      id\n      legacyId\n      status\n      description\n      tags\n      ...ConfirmContributionFields\n      paymentMethod {\n        id\n        type\n      }\n      createdAt\n      processedAt\n      permissions {\n        id\n        canMarkAsExpired\n        canMarkAsPaid\n        canSetTags\n        canEdit\n      }\n      transactions {\n        id\n        legacyId\n        group\n        description\n        type\n        kind\n        createdAt\n        order {\n          id\n        }\n        amount {\n          valueInCents\n          currency\n        }\n        netAmount {\n          valueInCents\n          currency\n        }\n        taxAmount {\n          valueInCents\n          currency\n        }\n        taxInfo {\n          id\n          type\n          rate\n        }\n        paymentProcessorFee {\n          valueInCents\n          currency\n        }\n        fromAccount {\n          id\n          slug\n          type\n          name\n          imageUrl\n          isIncognito\n          ... on Individual {\n            isGuest\n          }\n        }\n        account {\n          id\n          slug\n          type\n          name\n          imageUrl\n        }\n      }\n    }\n    account(slug: $collectiveSlug) {\n      id\n      legacyId\n      slug\n      name\n      type\n      isHost\n      imageUrl\n      backgroundImageUrl\n      isActive\n      description\n      settings\n      twitterHandle\n      currency\n      expensePolicy\n      supportedExpenseTypes\n      features {\n        id\n        ...NavbarFields\n        MULTI_CURRENCY_EXPENSES\n      }\n      location {\n        id\n        address\n        country\n      }\n\n      stats {\n        id\n        balanceWithBlockedFunds {\n          valueInCents\n          currency\n        }\n      }\n\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          name\n          imageUrl\n          backgroundImageUrl\n          twitterHandle\n        }\n      }\n      ... on AccountWithHost {\n        host {\n          id\n          name\n          slug\n          imageUrl\n          backgroundImageUrl\n        }\n      }\n      ... on Organization {\n        host {\n          id\n          name\n          slug\n          imageUrl\n          backgroundImageUrl\n        }\n      }\n    }\n  }\n\n  \n  \n"): typeof import('./graphql').OrderPageDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SubmittedExpensesPage(\n    $collectiveSlug: String!\n    $limit: Int!\n    $offset: Int!\n    $type: ExpenseType\n    $tags: [String]\n    $status: ExpenseStatusFilter\n    $minAmount: Int\n    $maxAmount: Int\n    $payoutMethodType: PayoutMethodType\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $searchTerm: String\n    $orderBy: ChronologicalOrderInput\n  ) {\n    account(slug: $collectiveSlug) {\n      id\n      legacyId\n      slug\n      type\n      imageUrl\n      backgroundImageUrl\n      twitterHandle\n      name\n      currency\n      isArchived\n      isActive\n      settings\n      createdAt\n      supportedExpenseTypes\n      isHost\n      features {\n        id\n        ...NavbarFields\n      }\n    }\n    expenses(\n      createdByAccount: { slug: $collectiveSlug }\n      limit: $limit\n      offset: $offset\n      type: $type\n      tag: $tags\n      status: $status\n      minAmount: $minAmount\n      maxAmount: $maxAmount\n      payoutMethodType: $payoutMethodType\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n      searchTerm: $searchTerm\n      orderBy: $orderBy\n    ) {\n      totalCount\n      offset\n      limit\n      nodes {\n        id\n        ...ExpensesListFieldsFragment\n        amountInCreatedByAccountCurrency: amountV2(currencySource: CREATED_BY_ACCOUNT) {\n          value\n          valueInCents\n          currency\n          exchangeRate {\n            date\n            value\n            source\n            isApproximate\n          }\n        }\n        host {\n          id\n          ...ExpenseHostFields\n        }\n      }\n    }\n  }\n\n  \n  \n  \n"): typeof import('./graphql').SubmittedExpensesPageDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query HostTerms($hostCollectiveSlug: String!) {\n    host(slug: $hostCollectiveSlug) {\n      id\n      termsUrl\n      isTrustedHost\n    }\n  }\n"): typeof import('./graphql').HostTermsDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ProcessingOrderFields on Order {\n    id\n    legacyId\n    nextChargeDate\n    paymentMethod {\n      id\n      service\n      name\n      type\n      expiryDate\n      data\n      balance {\n        value\n        valueInCents\n        currency\n      }\n    }\n    amount {\n      value\n      valueInCents\n      currency\n    }\n    totalAmount {\n      value\n      valueInCents\n      currency\n    }\n    status\n    description\n    createdAt\n    frequency\n    tier {\n      id\n      name\n    }\n    totalDonations {\n      value\n      valueInCents\n      currency\n    }\n    fromAccount {\n      id\n      name\n      slug\n      isIncognito\n      type\n      ... on Individual {\n        isGuest\n      }\n    }\n    toAccount {\n      id\n      slug\n      name\n      type\n      description\n      tags\n      imageUrl\n      settings\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n          paypalClientId\n          supportedPaymentMethods\n        }\n      }\n      ... on Organization {\n        host {\n          id\n          slug\n          paypalClientId\n          supportedPaymentMethods\n        }\n      }\n    }\n    platformTipAmount {\n      value\n      valueInCents\n    }\n  }\n"): typeof import('./graphql').ProcessingOrderFieldsFragmentDoc;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query TransactionsPage(\n    $slug: String!\n    $limit: Int!\n    $offset: Int!\n    $type: TransactionType\n    $paymentMethodType: [PaymentMethodType]\n    $minAmount: Int\n    $maxAmount: Int\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $searchTerm: String\n    $kind: [TransactionKind]\n    $includeIncognitoTransactions: Boolean\n    $includeGiftCardTransactions: Boolean\n    $includeChildrenTransactions: Boolean\n    $virtualCard: [VirtualCardReferenceInput]\n    $orderBy: ChronologicalOrderInput\n  ) {\n    account(slug: $slug) {\n      id\n      legacyId\n      slug\n      name\n      type\n      createdAt\n      imageUrl(height: 256)\n      currency\n      settings\n      features {\n        id\n        ...NavbarFields\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          name\n        }\n      }\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n        }\n      }\n      processingOrders: orders(filter: OUTGOING, includeIncognito: true, status: [PENDING, PROCESSING]) {\n        totalCount\n        nodes {\n          id\n          ...ProcessingOrderFields\n        }\n      }\n    }\n    transactions(\n      account: { slug: $slug }\n      limit: $limit\n      offset: $offset\n      type: $type\n      paymentMethodType: $paymentMethodType\n      minAmount: $minAmount\n      maxAmount: $maxAmount\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n      searchTerm: $searchTerm\n      kind: $kind\n      includeIncognitoTransactions: $includeIncognitoTransactions\n      includeGiftCardTransactions: $includeGiftCardTransactions\n      includeChildrenTransactions: $includeChildrenTransactions\n      includeDebts: true\n      virtualCard: $virtualCard\n      orderBy: $orderBy\n    ) {\n      ...TransactionsQueryCollectionFragment\n      kinds\n      paymentMethodTypes\n      totalCount\n    }\n  }\n  \n  \n  \n"): typeof import('./graphql').TransactionsPageDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UpdatePage($collectiveSlug: String, $updateSlug: String!, $offset: Int) {\n    account(slug: $collectiveSlug, throwIfMissing: false) {\n      id\n      legacyId\n      slug\n      name\n      type\n      description\n      settings\n      imageUrl\n      isFrozen\n      twitterHandle\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n          name\n          features {\n            id\n            CONTACT_FORM\n          }\n        }\n      }\n      features {\n        id\n        ...NavbarFields\n      }\n      conversationsTags {\n        id\n        tag\n      }\n      ... on Collective {\n        isApproved\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          name\n          imageUrl\n        }\n      }\n    }\n    update(slug: $updateSlug, account: { slug: $collectiveSlug }) {\n      id\n      slug\n      title\n      createdAt\n      publishedAt\n      html\n      summary\n      isPrivate\n      isChangelog\n      makePublicOn\n      userCanSeeUpdate\n      userCanPublishUpdate\n      reactions\n      userReactions\n      notificationAudience\n      account {\n        id\n        slug\n        type\n        name\n        isHost\n      }\n      fromAccount {\n        id\n        slug\n        type\n        name\n      }\n      comments(limit: 100, offset: $offset) {\n        totalCount\n        nodes {\n          id\n          ...CommentFields\n        }\n      }\n    }\n  }\n  \n  \n"): typeof import('./graphql').UpdatePageDocument;
  /**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UpdatesPage(\n    $collectiveSlug: String!\n    $limit: Int\n    $offset: Int\n    $searchTerm: String\n    $orderBy: UpdateChronologicalOrderInput\n  ) {\n    account(slug: $collectiveSlug) {\n      id\n      legacyId\n      name\n      slug\n      type\n      ... on Event {\n        parent {\n          id\n          name\n          slug\n          imageUrl\n        }\n      }\n      ... on Project {\n        parent {\n          id\n          name\n          slug\n          imageUrl\n        }\n      }\n      features {\n        id\n        ...NavbarFields\n      }\n      updates(limit: $limit, offset: $offset, searchTerm: $searchTerm, orderBy: $orderBy) {\n        totalCount\n        offset\n        limit\n        nodes {\n          id\n          slug\n          title\n          summary\n          createdAt\n          publishedAt\n          updatedAt\n          userCanSeeUpdate\n          notificationAudience\n          tags\n          isPrivate\n          isChangelog\n          makePublicOn\n          fromAccount {\n            id\n            type\n            name\n            slug\n            imageUrl\n          }\n        }\n      }\n    }\n  }\n  \n"): typeof import('./graphql').UpdatesPageDocument;
  export function gql(source: string): unknown;

    export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<    infer TType,    any  >    ? TType    : never;  
}
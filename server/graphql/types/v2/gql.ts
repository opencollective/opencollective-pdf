/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
  '\n    query ExpenseInvoice($expenseId: String!) {\n      expense(expense: { id: $expenseId }) {\n        id\n        legacyId\n        description\n        currency\n        type\n        invoiceInfo\n        amount\n        reference\n        permissions {\n          canSeeInvoiceInfo\n        }\n        taxes {\n          id\n          type\n          rate\n          idNumber\n        }\n        createdAt\n        account {\n          id\n          type\n          name\n          legalName\n          slug\n          imageUrl\n          settings\n          location {\n            address\n            country\n          }\n          ... on AccountWithHost {\n            host {\n              id\n              name\n              legalName\n              slug\n              type\n              expensePolicy\n              settings\n              location {\n                address\n                country\n              }\n            }\n          }\n        }\n        payee {\n          id\n          type\n          name\n          legalName\n          slug\n          imageUrl\n          ... on AccountWithHost {\n            host {\n              id\n              name\n              legalName\n              slug\n              type\n              expensePolicy\n              location {\n                address\n                country\n              }\n            }\n          }\n        }\n        payeeLocation {\n          address\n          country\n        }\n        items {\n          id\n          description\n          incurredAt\n          url\n          amountV2 {\n            valueInCents\n            currency\n            exchangeRate {\n              fromCurrency\n              toCurrency\n              value\n              date\n              isApproximate\n              source\n            }\n          }\n        }\n      }\n    }\n  ': typeof types.ExpenseInvoiceDocument;
  '\n  fragment ReceiptTransactionHostFieldsFragment on Account {\n    id\n    slug\n    name\n    legalName\n    currency\n    imageUrl(height: 200)\n    website\n    settings\n    type\n    location {\n      name\n      address\n      country\n    }\n  }\n': typeof types.ReceiptTransactionHostFieldsFragmentFragmentDoc;
  '\n  fragment ReceiptTransactionFragment on Transaction {\n    id\n    type\n    kind\n    createdAt\n    description\n    hostCurrencyFxRate\n    invoiceTemplate\n    isRefund\n    host {\n      ...ReceiptTransactionHostFieldsFragment\n    }\n    oppositeTransaction {\n      host {\n        ...ReceiptTransactionHostFieldsFragment\n      }\n    }\n    amount {\n      valueInCents\n      currency\n    }\n    amountInHostCurrency {\n      valueInCents\n      currency\n    }\n    netAmount {\n      valueInCents\n      currency\n    }\n    taxAmount {\n      valueInCents\n      currency\n    }\n    taxInfo {\n      type\n      rate\n    }\n    type\n    paymentMethod {\n      id\n      type\n      service\n      name\n    }\n    fromAccount {\n      id\n      slug\n      name\n      legalName\n      type\n      settings\n      location {\n        name\n        address\n        country\n      }\n      ... on AccountWithHost {\n        host {\n          id\n          name\n          legalName\n          slug\n          type\n          expensePolicy\n          settings\n          location {\n            address\n            country\n          }\n        }\n      }\n    }\n    toAccount {\n      id\n      slug\n      legalName\n      name\n      type\n      settings\n      location {\n        name\n        address\n        country\n      }\n      ... on Event {\n        startsAt\n        endsAt\n        timezone\n      }\n    }\n    giftCardEmitterAccount {\n      id\n      slug\n      name\n      legalName\n      type\n    }\n    isRefund\n    refundTransaction {\n      id\n    }\n    order {\n      id\n      legacyId\n      data\n      taxes {\n        type\n        percentage\n      }\n      quantity\n      tier {\n        id\n        type\n        invoiceTemplate\n      }\n    }\n  }\n  \n': typeof types.ReceiptTransactionFragmentFragmentDoc;
  '\n    query TransactionInvoice($transactionId: String!) {\n      transaction(id: $transactionId) {\n        id\n        type\n        kind\n        permissions {\n          canDownloadInvoice\n        }\n        ...ReceiptTransactionFragment\n        ... on Debit {\n          oppositeTransaction {\n            id\n            type\n            kind\n            permissions {\n              canDownloadInvoice\n            }\n            ...ReceiptTransactionFragment\n          }\n        }\n      }\n    }\n    \n  ': typeof types.TransactionInvoiceDocument;
  '\n    query InvoiceByDateRange(\n      $fromCollectiveSlug: String!\n      $hostSlug: String!\n      $dateFrom: DateTime!\n      $dateTo: DateTime!\n      $hasExpense: Boolean\n    ) {\n      host(slug: $hostSlug) {\n        ...ReceiptTransactionHostFieldsFragment\n      }\n      fromAccount: account(slug: $fromCollectiveSlug) {\n        id\n        slug\n        name\n        legalName\n        currency\n        type\n        permissions {\n          canDownloadPaymentReceipts {\n            allowed\n          }\n        }\n        settings\n        location {\n          name\n          address\n          country\n        }\n      }\n      transactions(\n        fromAccount: { slug: $fromCollectiveSlug }\n        host: { slug: $hostSlug }\n        dateFrom: $dateFrom\n        dateTo: $dateTo\n        limit: 1000\n        includeIncognitoTransactions: true\n        includeGiftCardTransactions: true\n        hasExpense: $hasExpense\n        kind: [CONTRIBUTION, PLATFORM_TIP]\n      ) {\n        totalCount\n        nodes {\n          ...ReceiptTransactionFragment\n        }\n      }\n    }\n    \n    \n  ': typeof types.InvoiceByDateRangeDocument;
};
const documents: Documents = {
  '\n    query ExpenseInvoice($expenseId: String!) {\n      expense(expense: { id: $expenseId }) {\n        id\n        legacyId\n        description\n        currency\n        type\n        invoiceInfo\n        amount\n        reference\n        permissions {\n          canSeeInvoiceInfo\n        }\n        taxes {\n          id\n          type\n          rate\n          idNumber\n        }\n        createdAt\n        account {\n          id\n          type\n          name\n          legalName\n          slug\n          imageUrl\n          settings\n          location {\n            address\n            country\n          }\n          ... on AccountWithHost {\n            host {\n              id\n              name\n              legalName\n              slug\n              type\n              expensePolicy\n              settings\n              location {\n                address\n                country\n              }\n            }\n          }\n        }\n        payee {\n          id\n          type\n          name\n          legalName\n          slug\n          imageUrl\n          ... on AccountWithHost {\n            host {\n              id\n              name\n              legalName\n              slug\n              type\n              expensePolicy\n              location {\n                address\n                country\n              }\n            }\n          }\n        }\n        payeeLocation {\n          address\n          country\n        }\n        items {\n          id\n          description\n          incurredAt\n          url\n          amountV2 {\n            valueInCents\n            currency\n            exchangeRate {\n              fromCurrency\n              toCurrency\n              value\n              date\n              isApproximate\n              source\n            }\n          }\n        }\n      }\n    }\n  ':
    types.ExpenseInvoiceDocument,
  '\n  fragment ReceiptTransactionHostFieldsFragment on Account {\n    id\n    slug\n    name\n    legalName\n    currency\n    imageUrl(height: 200)\n    website\n    settings\n    type\n    location {\n      name\n      address\n      country\n    }\n  }\n':
    types.ReceiptTransactionHostFieldsFragmentFragmentDoc,
  '\n  fragment ReceiptTransactionFragment on Transaction {\n    id\n    type\n    kind\n    createdAt\n    description\n    hostCurrencyFxRate\n    invoiceTemplate\n    isRefund\n    host {\n      ...ReceiptTransactionHostFieldsFragment\n    }\n    oppositeTransaction {\n      host {\n        ...ReceiptTransactionHostFieldsFragment\n      }\n    }\n    amount {\n      valueInCents\n      currency\n    }\n    amountInHostCurrency {\n      valueInCents\n      currency\n    }\n    netAmount {\n      valueInCents\n      currency\n    }\n    taxAmount {\n      valueInCents\n      currency\n    }\n    taxInfo {\n      type\n      rate\n    }\n    type\n    paymentMethod {\n      id\n      type\n      service\n      name\n    }\n    fromAccount {\n      id\n      slug\n      name\n      legalName\n      type\n      settings\n      location {\n        name\n        address\n        country\n      }\n      ... on AccountWithHost {\n        host {\n          id\n          name\n          legalName\n          slug\n          type\n          expensePolicy\n          settings\n          location {\n            address\n            country\n          }\n        }\n      }\n    }\n    toAccount {\n      id\n      slug\n      legalName\n      name\n      type\n      settings\n      location {\n        name\n        address\n        country\n      }\n      ... on Event {\n        startsAt\n        endsAt\n        timezone\n      }\n    }\n    giftCardEmitterAccount {\n      id\n      slug\n      name\n      legalName\n      type\n    }\n    isRefund\n    refundTransaction {\n      id\n    }\n    order {\n      id\n      legacyId\n      data\n      taxes {\n        type\n        percentage\n      }\n      quantity\n      tier {\n        id\n        type\n        invoiceTemplate\n      }\n    }\n  }\n  \n':
    types.ReceiptTransactionFragmentFragmentDoc,
  '\n    query TransactionInvoice($transactionId: String!) {\n      transaction(id: $transactionId) {\n        id\n        type\n        kind\n        permissions {\n          canDownloadInvoice\n        }\n        ...ReceiptTransactionFragment\n        ... on Debit {\n          oppositeTransaction {\n            id\n            type\n            kind\n            permissions {\n              canDownloadInvoice\n            }\n            ...ReceiptTransactionFragment\n          }\n        }\n      }\n    }\n    \n  ':
    types.TransactionInvoiceDocument,
  '\n    query InvoiceByDateRange(\n      $fromCollectiveSlug: String!\n      $hostSlug: String!\n      $dateFrom: DateTime!\n      $dateTo: DateTime!\n      $hasExpense: Boolean\n    ) {\n      host(slug: $hostSlug) {\n        ...ReceiptTransactionHostFieldsFragment\n      }\n      fromAccount: account(slug: $fromCollectiveSlug) {\n        id\n        slug\n        name\n        legalName\n        currency\n        type\n        permissions {\n          canDownloadPaymentReceipts {\n            allowed\n          }\n        }\n        settings\n        location {\n          name\n          address\n          country\n        }\n      }\n      transactions(\n        fromAccount: { slug: $fromCollectiveSlug }\n        host: { slug: $hostSlug }\n        dateFrom: $dateFrom\n        dateTo: $dateTo\n        limit: 1000\n        includeIncognitoTransactions: true\n        includeGiftCardTransactions: true\n        hasExpense: $hasExpense\n        kind: [CONTRIBUTION, PLATFORM_TIP]\n      ) {\n        totalCount\n        nodes {\n          ...ReceiptTransactionFragment\n        }\n      }\n    }\n    \n    \n  ':
    types.InvoiceByDateRangeDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n    query ExpenseInvoice($expenseId: String!) {\n      expense(expense: { id: $expenseId }) {\n        id\n        legacyId\n        description\n        currency\n        type\n        invoiceInfo\n        amount\n        reference\n        permissions {\n          canSeeInvoiceInfo\n        }\n        taxes {\n          id\n          type\n          rate\n          idNumber\n        }\n        createdAt\n        account {\n          id\n          type\n          name\n          legalName\n          slug\n          imageUrl\n          settings\n          location {\n            address\n            country\n          }\n          ... on AccountWithHost {\n            host {\n              id\n              name\n              legalName\n              slug\n              type\n              expensePolicy\n              settings\n              location {\n                address\n                country\n              }\n            }\n          }\n        }\n        payee {\n          id\n          type\n          name\n          legalName\n          slug\n          imageUrl\n          ... on AccountWithHost {\n            host {\n              id\n              name\n              legalName\n              slug\n              type\n              expensePolicy\n              location {\n                address\n                country\n              }\n            }\n          }\n        }\n        payeeLocation {\n          address\n          country\n        }\n        items {\n          id\n          description\n          incurredAt\n          url\n          amountV2 {\n            valueInCents\n            currency\n            exchangeRate {\n              fromCurrency\n              toCurrency\n              value\n              date\n              isApproximate\n              source\n            }\n          }\n        }\n      }\n    }\n  ',
): (typeof documents)['\n    query ExpenseInvoice($expenseId: String!) {\n      expense(expense: { id: $expenseId }) {\n        id\n        legacyId\n        description\n        currency\n        type\n        invoiceInfo\n        amount\n        reference\n        permissions {\n          canSeeInvoiceInfo\n        }\n        taxes {\n          id\n          type\n          rate\n          idNumber\n        }\n        createdAt\n        account {\n          id\n          type\n          name\n          legalName\n          slug\n          imageUrl\n          settings\n          location {\n            address\n            country\n          }\n          ... on AccountWithHost {\n            host {\n              id\n              name\n              legalName\n              slug\n              type\n              expensePolicy\n              settings\n              location {\n                address\n                country\n              }\n            }\n          }\n        }\n        payee {\n          id\n          type\n          name\n          legalName\n          slug\n          imageUrl\n          ... on AccountWithHost {\n            host {\n              id\n              name\n              legalName\n              slug\n              type\n              expensePolicy\n              location {\n                address\n                country\n              }\n            }\n          }\n        }\n        payeeLocation {\n          address\n          country\n        }\n        items {\n          id\n          description\n          incurredAt\n          url\n          amountV2 {\n            valueInCents\n            currency\n            exchangeRate {\n              fromCurrency\n              toCurrency\n              value\n              date\n              isApproximate\n              source\n            }\n          }\n        }\n      }\n    }\n  '];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  fragment ReceiptTransactionHostFieldsFragment on Account {\n    id\n    slug\n    name\n    legalName\n    currency\n    imageUrl(height: 200)\n    website\n    settings\n    type\n    location {\n      name\n      address\n      country\n    }\n  }\n',
): (typeof documents)['\n  fragment ReceiptTransactionHostFieldsFragment on Account {\n    id\n    slug\n    name\n    legalName\n    currency\n    imageUrl(height: 200)\n    website\n    settings\n    type\n    location {\n      name\n      address\n      country\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  fragment ReceiptTransactionFragment on Transaction {\n    id\n    type\n    kind\n    createdAt\n    description\n    hostCurrencyFxRate\n    invoiceTemplate\n    isRefund\n    host {\n      ...ReceiptTransactionHostFieldsFragment\n    }\n    oppositeTransaction {\n      host {\n        ...ReceiptTransactionHostFieldsFragment\n      }\n    }\n    amount {\n      valueInCents\n      currency\n    }\n    amountInHostCurrency {\n      valueInCents\n      currency\n    }\n    netAmount {\n      valueInCents\n      currency\n    }\n    taxAmount {\n      valueInCents\n      currency\n    }\n    taxInfo {\n      type\n      rate\n    }\n    type\n    paymentMethod {\n      id\n      type\n      service\n      name\n    }\n    fromAccount {\n      id\n      slug\n      name\n      legalName\n      type\n      settings\n      location {\n        name\n        address\n        country\n      }\n      ... on AccountWithHost {\n        host {\n          id\n          name\n          legalName\n          slug\n          type\n          expensePolicy\n          settings\n          location {\n            address\n            country\n          }\n        }\n      }\n    }\n    toAccount {\n      id\n      slug\n      legalName\n      name\n      type\n      settings\n      location {\n        name\n        address\n        country\n      }\n      ... on Event {\n        startsAt\n        endsAt\n        timezone\n      }\n    }\n    giftCardEmitterAccount {\n      id\n      slug\n      name\n      legalName\n      type\n    }\n    isRefund\n    refundTransaction {\n      id\n    }\n    order {\n      id\n      legacyId\n      data\n      taxes {\n        type\n        percentage\n      }\n      quantity\n      tier {\n        id\n        type\n        invoiceTemplate\n      }\n    }\n  }\n  \n',
): (typeof documents)['\n  fragment ReceiptTransactionFragment on Transaction {\n    id\n    type\n    kind\n    createdAt\n    description\n    hostCurrencyFxRate\n    invoiceTemplate\n    isRefund\n    host {\n      ...ReceiptTransactionHostFieldsFragment\n    }\n    oppositeTransaction {\n      host {\n        ...ReceiptTransactionHostFieldsFragment\n      }\n    }\n    amount {\n      valueInCents\n      currency\n    }\n    amountInHostCurrency {\n      valueInCents\n      currency\n    }\n    netAmount {\n      valueInCents\n      currency\n    }\n    taxAmount {\n      valueInCents\n      currency\n    }\n    taxInfo {\n      type\n      rate\n    }\n    type\n    paymentMethod {\n      id\n      type\n      service\n      name\n    }\n    fromAccount {\n      id\n      slug\n      name\n      legalName\n      type\n      settings\n      location {\n        name\n        address\n        country\n      }\n      ... on AccountWithHost {\n        host {\n          id\n          name\n          legalName\n          slug\n          type\n          expensePolicy\n          settings\n          location {\n            address\n            country\n          }\n        }\n      }\n    }\n    toAccount {\n      id\n      slug\n      legalName\n      name\n      type\n      settings\n      location {\n        name\n        address\n        country\n      }\n      ... on Event {\n        startsAt\n        endsAt\n        timezone\n      }\n    }\n    giftCardEmitterAccount {\n      id\n      slug\n      name\n      legalName\n      type\n    }\n    isRefund\n    refundTransaction {\n      id\n    }\n    order {\n      id\n      legacyId\n      data\n      taxes {\n        type\n        percentage\n      }\n      quantity\n      tier {\n        id\n        type\n        invoiceTemplate\n      }\n    }\n  }\n  \n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n    query TransactionInvoice($transactionId: String!) {\n      transaction(id: $transactionId) {\n        id\n        type\n        kind\n        permissions {\n          canDownloadInvoice\n        }\n        ...ReceiptTransactionFragment\n        ... on Debit {\n          oppositeTransaction {\n            id\n            type\n            kind\n            permissions {\n              canDownloadInvoice\n            }\n            ...ReceiptTransactionFragment\n          }\n        }\n      }\n    }\n    \n  ',
): (typeof documents)['\n    query TransactionInvoice($transactionId: String!) {\n      transaction(id: $transactionId) {\n        id\n        type\n        kind\n        permissions {\n          canDownloadInvoice\n        }\n        ...ReceiptTransactionFragment\n        ... on Debit {\n          oppositeTransaction {\n            id\n            type\n            kind\n            permissions {\n              canDownloadInvoice\n            }\n            ...ReceiptTransactionFragment\n          }\n        }\n      }\n    }\n    \n  '];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n    query InvoiceByDateRange(\n      $fromCollectiveSlug: String!\n      $hostSlug: String!\n      $dateFrom: DateTime!\n      $dateTo: DateTime!\n      $hasExpense: Boolean\n    ) {\n      host(slug: $hostSlug) {\n        ...ReceiptTransactionHostFieldsFragment\n      }\n      fromAccount: account(slug: $fromCollectiveSlug) {\n        id\n        slug\n        name\n        legalName\n        currency\n        type\n        permissions {\n          canDownloadPaymentReceipts {\n            allowed\n          }\n        }\n        settings\n        location {\n          name\n          address\n          country\n        }\n      }\n      transactions(\n        fromAccount: { slug: $fromCollectiveSlug }\n        host: { slug: $hostSlug }\n        dateFrom: $dateFrom\n        dateTo: $dateTo\n        limit: 1000\n        includeIncognitoTransactions: true\n        includeGiftCardTransactions: true\n        hasExpense: $hasExpense\n        kind: [CONTRIBUTION, PLATFORM_TIP]\n      ) {\n        totalCount\n        nodes {\n          ...ReceiptTransactionFragment\n        }\n      }\n    }\n    \n    \n  ',
): (typeof documents)['\n    query InvoiceByDateRange(\n      $fromCollectiveSlug: String!\n      $hostSlug: String!\n      $dateFrom: DateTime!\n      $dateTo: DateTime!\n      $hasExpense: Boolean\n    ) {\n      host(slug: $hostSlug) {\n        ...ReceiptTransactionHostFieldsFragment\n      }\n      fromAccount: account(slug: $fromCollectiveSlug) {\n        id\n        slug\n        name\n        legalName\n        currency\n        type\n        permissions {\n          canDownloadPaymentReceipts {\n            allowed\n          }\n        }\n        settings\n        location {\n          name\n          address\n          country\n        }\n      }\n      transactions(\n        fromAccount: { slug: $fromCollectiveSlug }\n        host: { slug: $hostSlug }\n        dateFrom: $dateFrom\n        dateTo: $dateTo\n        limit: 1000\n        includeIncognitoTransactions: true\n        includeGiftCardTransactions: true\n        hasExpense: $hasExpense\n        kind: [CONTRIBUTION, PLATFORM_TIP]\n      ) {\n        totalCount\n        nodes {\n          ...ReceiptTransactionFragment\n        }\n      }\n    }\n    \n    \n  '];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
